apply plugin: 'com.android.application'


// tag::extBlock[]
ext {
    // ...
// end::extBlock[]

    // tag::dagger2Include[]
    daggerVersion = "2.25.2"
    // end::dagger2Include[]

    mqtt3Version = "1.2.2"

    // tag::theGreatThree[]
    // test libraries
    mockitoVersion = "3.1.0"
    hamcrestVersion = "2.1"
    awaitilityVersion = "4.0.1"
    // end::theGreatThree[]

// tag::extBlock[]
}
// end::extBlock[]

// tag::androidBlock[]
android {
    // ...
// end::androidBlock[]
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "ch.amk.exercise4.mqtt"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // tag::recommendedOptions[]
    compileOptions { // <1>
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    // end::recommendedOptions[]

    /**
     tag::recommendedOptionsDesc[]
     <1> Enable using Java 1.8 features like lambdas, highly recommended. It will increase
     the workflow and helping improving the writing style.
     end::recommendedOptionsDesc[]
     */

    // tag::recommendedOptions[]
    testOptions {
        unitTests.includeAndroidResources = true // <2>
        unitTests.returnDefaultValues = true // <3>
    }
    // end::recommendedOptions[]

/**
 tag::recommendedOptionsDesc[]
 <2> helps with the unit tests, checkout the
 https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.TestOptions.UnitTestOptions.html#com.android.build.gradle.internal.dsl.TestOptions.UnitTestOptions:includeAndroidResources[documentaiton]
 <3> prevents errors, but can also end up with NullPointer exceptions while Android.Log is used.
 to prevent those, have a look at the https://github.com/bjoernQ/unmock-plugin[unMock plugin]
 end::recommendedOptionsDesc[]
 */
// tag::androidBlock[]
}
// end::androidBlock[]

// tag::dependenciesBlock[]
dependencies {
    // ...
    // end::dependenciesBlock[]

    // tag::dagger2Include[]

    implementation "com.google.dagger:dagger:${project.daggerVersion}"
    implementation "com.google.dagger:dagger-android:${project.daggerVersion}"
    // end::dagger2Include[]

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${project.mqtt3Version}"
    implementation "com.google.android.material:material:1.1.0-alpha06"

    // tag::dagger2Include[]

    annotationProcessor "com.google.dagger:dagger-android-processor:${project.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${project.daggerVersion}"
    // end::dagger2Include[]

    // tag::theGreatThree[]
    testImplementation('junit:junit:4.12') {
        exclude group: 'org.hamcrest' // <1>
    }
    testImplementation('com.android.support.test:rules:1.0.2') {
        exclude group: 'org.hamcrest' // <1>
    }
    testImplementation('com.android.support.test:runner:1.0.2') {
        exclude group: 'org.hamcrest' // <1>
    }
    testImplementation "org.awaitility:awaitility:${project.awaitilityVersion}"
    testImplementation "org.hamcrest:hamcrest:${project.hamcrestVersion}"
    testImplementation "org.mockito:mockito-core:${project.mockitoVersion}"

    // end::theGreatThree[]

    // tag::uiautomator[]
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    // end::uiautomator[]


    /** tag::theGreatThreeDesc[]
     <1> needed, since awaitility is dependent on a newer hamcrest version. This will prevent build errors
     end::theGreatThreeDesc[] */

    // tag::theGreatThree[]
    androidTestImplementation('androidx.test.ext:junit:1.1.0') {
        exclude group: 'org.hamcrest'
    }
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.1') {
        exclude group: 'org.hamcrest'
    }
    androidTestImplementation('com.android.support.test:rules:1.0.2') { // <2>
        exclude group: 'org.hamcrest'
    }
    androidTestImplementation('com.android.support.test:runner:1.0.2') {
        exclude group: 'org.hamcrest'
    }
    androidTestImplementation "org.awaitility:awaitility:${project.awaitilityVersion}"
    androidTestImplementation "org.hamcrest:hamcrest:${project.hamcrestVersion}"
    androidTestImplementation "org.mockito:mockito-core:${project.mockitoVersion}"
    // end::theGreatThree[]

    /** tag::theGreatThreeDesc[]
     <2> if missing, strange permission errors will popup
     end::theGreatThreeDesc[] */

    // tag::dagger2Include[]

    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:${project.daggerVersion}"
    // <1>
    androidTestAnnotationProcessor "com.google.dagger:dagger-android-processor:${project.daggerVersion}"
    // <1>
    // end::dagger2Include[]

    /** tag::dagger2IncludeDesc[]
     <1> Enable access of the Annotation Processor in the Insturmented tests. Needed to be able to provide
     mocked versions
     end::dagger2IncludeDesc[] */

// tag::dependenciesBlock[]
}
// end::dependenciesBlock[]

