[{"body":"<p>\r\nWhen developing for the web, many people use <a href=\"http://google.com/analytics\">Google Analytics</a> to track, you guessed it, analytical data about users. While the tool is great at what it does, one problem that consistently comes up is the need to keep development analytics from being tracked.\r\n</p>\r\n\r\n<p>\r\nUsually you can use an environment variable on the server-side to only serve the Google Analytics code in production mode. Another option would be to setup a filter in Google Analytics to only track events from a specified domain (your production URL).\r\n</p>\r\n\r\n<p>\r\nThe server-side solution is the most elegant in my opinion because filters aren't applied to the Real-TIme analytics, which can be irritating at times. But what if you are simply serving static HTML files, or want to use a separate, development mode Google Analytics account, even in your staging servers that are set to production mode?\r\n</p>\r\n\r\n\r\n<p>\r\nThe solution is to use JavaScript and detect the hostname to determine if it's being served in production mode. \r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n&lt;script type=\"text/javascript\"&gt;\r\n     if (document.location.hostname.indexOf(\"kylewbanks.com\") != -1) {\r\n          /* Production Google Analytics Code */\r\n     } else {\r\n          /* (Optional) Development Google Analytics Code */\r\n     }\r\n&lt;/script&gt;\r\n</pre>\r\n\r\n\r\n<p>\r\nIn most cases, this logic is best suited for the server-side, or using filters in Google Analytics if you can get passed the fact that Real-Time analytics are not filtered. But, for cases where JavaScript is the best solution, enjoy.\r\n</p>","date":"8/29/2013 00:01 AM","preview":"When developing for the web, many people use <a href=\"http://google.com/analytics\">Google Analytics</a> to track, you guessed it, analytical data about users. While the tool is great at what it does, one problem that consistently comes up is the need to keep development analytics from being tracked.","title":"Disabling Google Analytics in Development Using Only JavaScript","url":"http://kylewbanks.com/blog/Disabling-Google-Analytics-in-Development-Using-Only-JavaScript","author":"Kyle Banks","id":1,"tags":[]},{"body":"<h4>Getting Started</h4>\n<p>\nFirst off, lets get Python installed. If you are running a Linux distro you should already have it on your system.\nRun the command: \n<pre class=\"code prettyprint\">\npython -V\n</pre>\nIn a terminal to see if you have it. If not take a look around for how to properly install it on your system. Many\nLinux distros rely on Python, and a specific version at that, so you have to be careful not to ruin your OS's installation.\n</p>\n\n<p>\nIf you do want to use a different version of Python on Linux, you will need to modify the <b>PATH</b> variable to point\nto your installation. It is highly recommended you do NOT modify the 'default' Python installation. Again, take a look \naround for notes on how to install Python on your distro.\n</p>\n\n<p>\nIf you are using Windows or Mac OS, Python can be <a href=\"http://www.python.org/getit/\">downloaded here</a>. \nI recommend getting Python version 3.2.X or higher. Download the appropriate installer for your system, \nand run it while following the prompts.\n</p>\n\n<h4>Hello, Python!</h4>\n<p>\nLet's start our Python careers with the usual <b>\"Hello, World!\"</b> tutorial. Don't worry, we will write something\na little more complex shortly.\n</p>\n\n<p>\nIf you are on Linux, simply type \n<pre class=\"code prettyprint\">\npython\n</pre>\ninto a terminal to open the interactive Python shell. This shell can be used to great affect for testing your code\nor trying out different methods and classes.\n</p>\n\n<p>\nIf you are on Windows, lets open up <a href=\"http://en.wikipedia.org/wiki/IDLE_(Python)\">IDLE</a>, the IDE installed\nby default with Python. (This IDE is also available to Linux, but does not come with the default installation).\nClick <b>Start -> All Programs -> Python X.X -> IDLE (Python Gui)</b> to open up a similar Python shell as Linux\nusers are seeing.\n</p>\n\n<p>\nNow that we have our shell open, let's say hello to the world. \n</p>\n\n<pre class=\"code prettyprint\">\nprint(\"Hello, World!\")\n</pre>\n\n<p>\nWait... what? No semi-colon? No class or method declarations? No imports? Well, that was easy! As you can see, \npython code is written without semi-colons (unless you want to), and uses whitespace as it's main syntactical \nmeans of determining when you have finished typing a command. The only time you have to use the semi-colon is if\nyou want to put two or more commands on the same line. For instance\n</p>\n<pre class=\"code prettyprint\">\n# This won't work...\nprint(\"Hello, World\") print(\"What a fine day to learn Python!\")\n</pre>\n<p>\nwill not work. You would need to put a semi-colon after the first <b>print</b> statement. However if you like to \nmaintain your sanity, you likely aren't writting multiple statements on one line in the first place. In this case,\nyou will never need to use the semi-colon in Python. Hooray!\n</p>\n\n\n\n<h4>Integers & Basic Mathematics</h4>\n\n<p>\nWhat good is programming without numbers? Let's try out a more complicated Python application, and make a calculator.\n</p>\n\n<p>\nFirst thing's first, we need to define what our calculator will need. We want to be able to read-in user input, convert \nit into an integer, perform addition, subtraction, multiplication or division, and output a result. We should be able to handle a\ncase where the user does not input an integer, and if they try to divide by zero. This should be enough requirements\nto get us started, and to build a good introductory Python program.\n</p>\n\n<p>\nIf you are running linux, open a new file in your favorite text editor and save it as <b>python_calculator.py</b> in \na location that you won't lose it.\n</p>\n\n<p>\nOn Windows, open <b>IDLE</b> if you already closed it, and select <b>File -> New Window</b>. This will open up a blank\nwindow we can use for editing code, and we can run our code from here in the Python shell. \nSave this file as <b>python_calculator.py</b>.\n</p>\n\n<p>\nThe first thing we are going to do is quickly document our program using Python's multi-line comments.\n</p>\n\n<pre class=\"code prettyprint\">\n\"\"\"\nSimple calculator application.\n\nReads input from the command line, performs operations, and outputs a value.\n\"\"\"\n</pre>\n\n<p>\nAs you can see, in Python the multi-line comments are done using three double-quotes. We will take a look at the \nsingle line comments a little later.\n</p>\n\n<p>\nNext up, we want to ask the user to provide their first number. We can do this using the <b>input()</b> function\nwhich takes an optional string to prompt the user. We also want to convert this input to an integer so that we \ncan perform operations on it.\n</p>\n\n<pre class=\"code prettyprint\">\nnum1 = int(input(\"Enter a number: \"))\n</pre>\n\n<p>\nNote that this is not safe. If the user were to enter a non-numeric value, the program would throw an exception.\nWe can fix this using a try-catch block.\n</p>\n\n<pre class=\"code prettyprint\">\ntry:\n    num1 = int(input(\"Enter a number: \"))\nexcept NameError:\n    print(\"You have entered an invalid number!\")\n</pre>\n\n<p>\nThere are a few things to pay attention to here. The first thing is that lines inside a try-block (or if-statement, while-loop, \netc.) must be indented. Python uses whitespace as syntax, so you need to make sure to use the same amount of whitespace\nfor each line. If you are using a tab, always use a tab. If you use 3-spaces, always use 3-spaces. Fixing whitespace\nerrors can be troublesome so it's important to train yourself early to maintain consistent spacing.\n</p>\n\n<p>\nThe second thing to note is that the lines that are indented are preceded by a line with a colon. This colon acts\nlike braces do in many other languages. The colon tells Python that the following indented lines should only\nbe executed if the preceding statement evaluates to <b>True</b>.\n</p>\n\n<p>\nNow back to our calculator. If the user enters a non-numeric value, the application will catch the <b>NameError</b>\nexception and output an error message. Let's try it out.\n</p>\n\n<p> \nOn Linux (ensure your <b>PATH</b> variable points to the correct Python installation):\n</p>\n<pre class=\"code\">\npython python_calculator.py\n</pre>\n<p>\nOn Windows, click <b>Run -> Run Module</b> or <b>F5</b>\n</p>\n\n<p>\nIf you enter an invalid number, you should see something like this:\n</p>\n<pre class=\"code\">\nEnter a number: Five\nThat is not a valid number!\n</pre>\n<p>\nOtherwise, the program should exit gracefully without doing anything.\n</p>\n\n<p>\nNote there is still one problem with this piece of code. We don't want the program to exit if the user inputs \nbad data, we want it to prompt for input again. We can use a while-loop to help us out with this. Edit your code \nto look like this:\n</p>\n<pre class=\"code prettyprint\">\nwhile True:\n    try:\n        num1 = int(input(\"Enter a number: \"))\n        break\n    except NameError:\n        print(\"You have entered an invalid number!\")\n</pre>\n<p>\nThis will loop until the user inputs a proper integer. If they do not, it will output our error message, and prompt again.\n</p>\n\n<h4>Functions & Reusable Code</h4>\n<p>\nWe are going to be asking for another number from the user, and we don't want to have to rewrite the same code \nmultiple times, so why don't we create a function to accomplish this. We should be able to pass the function \na string to prompt the user, and then it should return the value the user inputs.\n</p>\n<p>\nFunctions in Python are defined using the <b>def</b> keyword and must be defined previously in the code before they \ncan be called. Let's modify our application to look like this:\n</p>\n\n<pre class=\"code prettyprint\">\n# Prompt the user to enter a number, and return it\ndef askForNumber(prompt):\n    while True:\n        try:\n            num = int(input(prompt))\n            return num\n        except NameError:\n            print(\"That is not a valid number!\")\n\n# Application logic\nnum1 = askForNumber(\"Enter a number: \")\n</pre>\n\n<p>\nAs you can see the code inside <b>askForNumber</b> is almost the same as what we wrote before, but now we don't have to write \nit again. We have created a reusable piece of code, rather than repetition. Here you can also see single line \ncomments, preceded by the hash-symbol.\n</p>\n\n<p>\nNext up we are going to want to ask the user for their second number. Now that we have this function, we can easily \nwrite this at the bottom of our code, and we now have two numbers from the user to work with:\n</p>\n\n<pre class=\"code prettyprint\">\nnum2 = askForNumber(\"Enter a second number: \")\n</pre>\n\n<p>\nNow lets output the results of a few mathematical operations. Beneath the code we currently have, add: \n</p>\n<pre class=\"code prettyprint\">\nprint(\"\")\nprint(str(num1) + \" + \" + str(num2) + \" = \" + str(num1+num2))\nprint(str(num1) + \" - \" + str(num2) + \" = \" + str(num1-num2))\nprint(str(num1) + \" / \" + str(num2) + \" = \" + str(num1/num2))\nprint(str(num1) + \" * \" + str(num2) + \" = \" + str(num1*num2))\n</pre>\n<p>\nThe first line simply prints a blank line for formatting. The remaining lines will compute the values of \nvarious operations, and convert the results into strings (as well as the original values) and print them to the user.\n</p>\n\n<p>\nSample output should look like this:\n</p>\n<pre class=\"code\">\nEnter a number: 23\nEnter a second number: 2\n\n23 + 2 = 25\n23 - 2 = 21\n23 / 2 = 11\n23 * 2 = 46\n</pre>\n\n<p>\nNote that there are a few problems with our current code. One, if you try to divide by zero an exception is thrown. \nTry on your own to catch this exception and print your own error message to the user informing them that they \nalmost caused their computer to implode. \n</p>\n\n<p>\nThe second issue is that if you input a floating point value, or when dividing uneven numbers, the result is\na floating point number cast into an integer. Look at the output above again, and notice that <b>23 / 2</b> is not \n11, its 11.5. The decimal places are missing! Try to rewrite this code to handle floating point values.\n</p>\n\n<p>\nIf all of this was too basic for you, or you have a little Python experience under your belt already, try \ngetting started using Python GUI classes and create a calculator using GUI elements including buttons and \ntextfields.\n</p>\n\n<p>\nFor now, here is the entire application code:\n</p>\n\n<pre class=\"code prettyprint\">\n\"\"\"\nSimple calculator application.\n\nReads input from the command line, performs operations, and outputs a value.\n\"\"\"\n# Prompt the user to enter a number, and return its value\ndef askForNumber(prompt):\n    while True:\n        try:\n            num = int(input(prompt))\n            return num\n        except NameError:\n            print(\"That is not a valid number!\")\n\n# Main logic\nnum1 = askForNumber(\"Enter a number: \")\nnum2 = askForNumber(\"Enter a second number: \")\n\nprint(\"\")\nprint(str(num1) + \" + \" + str(num2) + \" = \" + str(num1+num2))\nprint(str(num1) + \" - \" + str(num2) + \" = \" + str(num1-num2))\nprint(str(num1) + \" / \" + str(num2) + \" = \" + str(num1/num2))\nprint(str(num1) + \" * \" + str(num2) + \" = \" + str(num1*num2))\n</pre>\n","date":"2/18/2013 00:01 AM","preview":"\nFirst off, lets get Python installed. If you are running a Linux distro you should already have it on your system.\nRun the command: \n<pre class=\"code prettyprint\">\npython -V\n</pre>\nIn a terminal to see if you have it. If not take a look around for how to properly install it on your system. Many\nLinux distros rely on Python, and a specific version at that, so you have to be careful not to ruin your OS's installation.\n","title":"Get Started Programming with Python","url":"http://kylewbanks.com/blog/Start-Coding-Python","author":"Kyle Banks","id":23,"tags":[]},{"body":"<p>\nA common method of developing HTML5 applications for Android is to implement a native WebView and have it load your \nHTML5 web page. Using this method, the user is presented with what looks like a native application, because the 'browser' \nused to render your HTML does not have any of the standard browser buttons or the URL input. It simply loads your HTML with no other\nUI elements.\n</p>\n\n<p>\nIf you don't want to require internet access in your app, you can easily package the HTML/CSS/JavaScript/images/etc with your Android app, \nand have them run locally on the user's device. This works great, because you don't need to rely on slow mobile internet connections to load \nyour web pages. Doing this is very straightforward, as shown below:\n</p>\n\n<pre class=\"code prettyprint\">\npublic class MyActivity extends Activity {\n    WebView webView = null;\n\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //Get rid of the android title bar\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.main);\n\n        webView  = (WebView) findViewById(R.id.main_webview);\n        WebSettings settings = webView.getSettings();\n\n\t //Enable Javascript\n        settings.setJavaScriptEnabled(true);\n\n        webView.loadUrl(\"file:///android_asset/index.html\");\n     }\n}\n</pre>\n\n<p>\nThis does a few simple things. First, it removes the app title bar from the top of the view. Second, we enable JavaScript which is disabled by default. \nFinally, we load index.html which should be located in the assets directory in the root of your application. When the user loads this application, \nthey will simply see index.html, without URL's or browser buttons. Done properly, this can easily look like a native application.\n</p>\n\n<p>\nOne common element of any application though, is a requirement for data storage. So how is this accomplished without internet access?\nThe HTML5 database API, of course!\n</p>\n\n<h4>Preparing Android For the Database</h4>\n\n<p>\nImplementing and HTML5 database is very straightforward, but there are a few things you need to do with your WebView component before it will \nallow you to do so in an Android app.\n</p>\n\n<p>\nFirst, we need to tell Android where to store the database and we need to tell it that the database should persist once the application has closed (otherwise, \neach time the user closes the application, the database will be lost). The second bit of functionality we need to implement is to handle the case where the database\nmay have exceeded its maximum size. When this happens, we should increase the size of the database to make sure data is not lost. \n</p>\n\n<p>\nHere is the updated code:\n</p>\n\n<pre class=\"code prettyprint\">\npublic class MyActivity extends Activity {\n    WebView webView = null;\n\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //Get rid of the android title bar\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.main);\n\n        webView  = (WebView) findViewById(R.id.main_webview);\n        WebSettings settings = webView.getSettings();\n\n\t//Enable Javascript\n        settings.setJavaScriptEnabled(true);\n\t\t\n\t//Enable DOM storage, and tell Android where to save the Database\n     \tsettings.setDatabasePath(\"/data/data/\"+this.getPackageName()+\"/databases/\");\n        settings.setDomStorageEnabled(true);\n\n        webView.loadUrl(\"file:///android_asset/index.html\");\n\t\t\n     \twebView.setWebChromeClient(new WebChromeClient() {\n\t\t\n\t    \t/** Called when the database exceeds it's maximum size **/\n\t    \t@Override\n\t    \tpublic void onExceededDatabaseQuota(String url, String databaseIdentifier, long currentQuota, long estimatedSize, long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {\n\t\t\t//Double the estimated size of the Database\n\t\t       quotaUpdater.updateQuota(estimatedSize * 2);\n\t\t} \n        });\n    }\n}\n</pre>\n\n<p>\nNow we can go ahead and execute the JavaScript to access our database: \n</p>\n\n<pre class=\"code prettyprint\">\nvar myDB = window.openDatabase(DB_name, DB_version, DB_displayName, DB_sizeEstimate);\n\nif(myDB != null) {\n\t/* Ready to go! */\n} else {\n\t/* The WebView is not giving access to the Database, something isn't configured properly */\n}\n</pre>\n\n<p>\nAssuming you followed the above steps, you should be good to go with your database!\n</p>","date":"2/18/2013 00:01 AM","preview":"\nA common method of developing HTML5 applications for Android is to implement a native WebView and have it load your \nHTML5 web page. Using this method, the user is presented with what looks like a native application, because the 'browser' \nused to render your HTML does not have any of the standard browser buttons or the URL input. It simply loads your HTML with no other\nUI elements.\n","title":"Using an HTML5 Database in Your Android Application","url":"http://kylewbanks.com/blog/HTML5-Database-In-Android","author":"Kyle Banks","id":26,"tags":[]},{"body":"<p>A lot of times when starting a new Grails project (or any new project, for that matter), there is a lot of work done on user authentication and registration, role definition and permissions, and managing the authentication flow.</p>\r\n\r\n<p><a href=\"https://github.com/KyleBanks/GrailsCustomerAuthenticationTemplate\">This project template</a> takes away the majority of that work, so you can get right to the fun stuff.</p>\r\n\r\n<p>The <b>AdminUser</b> and <b>CustomerUser</b> domains, as well as the customer sign-up views come pre-populated with common properties, and are easy to modify to suit your needs. Also, take a look at <b>SignupController</b> to see how this all works.</p>\r\n\r\n<p><b>SecurityFilters</b> provides the logic for who can see which controllers/actions, and I owe thanks to <a href=\"http://coderberry.me/blog/2012/04/26/grails-authentication-with-shiro/\">CoderBerry.me</a> for the majority of the code there.</p>\r\n\r\n<p>By default <b>BootStrap</b> will create one <b>AdminUser</b> when in <b>Development</b> environment to get you started, and the properties of this admin can be modified directly there.</p>\r\n\r\n<p>If you have any suggestions on how to further reduce development time with this project, or if you have any questions, let me know in the comments or reach out to me on <a href=\"https://twitter.com/kylewbanks\">Twitter</a>.</p>\r\n\r\n<p><b><a href=\"https://github.com/KyleBanks/GrailsCustomerAuthenticationTemplate\">Get the source code on GitHub.</a></b></p>","date":"10/10/2013 00:01 AM","preview":"A lot of times when starting a new Grails project (or any new project, for that matter), there is a lot of work done on user authentication and registration, role definition and permissions, and managing the authentication flow.","title":"Open Sourced: Grails Customer Authentication Template","url":"http://kylewbanks.com/blog/Open-Sourced-Grails-Customer-Authentication-Template","author":"Kyle Banks","id":28,"tags":[]},{"body":"<p>Welcome to my new site. If you ever took the time to look at the old site, first of all thank you, secondly you will know it was severely lacking. The design was mediocre at best, and it was all very static. I wanted to start getting into blogging again, and not just use this space to showcase some of my work. </p>\n\n<p>\nThe old site was written in PHP and had no administrative interface. Any time I wanted to add, edit or delete content, I had to go straight through the database to do so. Obviously this is less than ideal. The code was also a mess, so updating the site itself was always a monolithic undertaking.\n</p>\n\n<p>\nI've built the new site with <a href=\"http://grails.org/\">Grails</a>, which is a Java/Groovy web framework based on Django and Ruby on Rails. If you haven't tried Grails, I highly recommend you do so. It is incredibly powerful, and offers all the robust and scalable libraries of Java, without the ridiculously verbose syntax that Java tends to impose. Take a look at this sample code containing the model I use for the tags on this site:  \n</p>\n\n<pre class=\"prettyprint\">\npackage com.kylewbanks.blog\n\nclass Tag {\n\n    String displayName\n    String url\n\n    static constraints = {\n        displayName(nullable: false, blank: false, unique: true)\n        url(nullable: false, blank: false, unique: true)\n    }\n\n    static mapping = {\n        sort displayName: 'asc'\n    }\n\n    public String toString() {\n        displayName\n    }\n}\n</pre>\n\n<p>\nThis model actually does way more than it appears. It offers all of the CRUD operations required when using a database (insert, update, delete). It offers a massive range of dynamically injected SELECTs such as <b>Tag.findByTitleAndURL(title, url)</b> by adding methods for every combination of properties on your model. The <b>constraints</b> mapping declares how the data will be persisted in the database and the validation it will have to pass in order to be saved successfully. It even allows you to define the default sort order when retrieving models using the dynamic queries. The best part is that Groovy compiles into Java code, so any old Java libraries you have are 100% compatible with Grails!\n</p>\n\n<p>\nObviously Grails is powerful, but the reason I am telling you all of this is that I will most likely end up open-sourcing the entire blog once I have finished polishing the admin panel, and am confident that the code is stable.\n</p>\n\n\n<p>\nIn any case, stay tuned for more posts ranging from code snippets to general thoughts on the tech world as a whole. I have brought over a few posts from my old blog, and look forward to writing more soon!\n</p>","date":"2/18/2013 00:01 AM","preview":"Welcome to my new site. If you ever took the time to look at the old site, first of all thank you, secondly you will know it was severely lacking. The design was mediocre at best, and it was all very static. I wanted to start getting into blogging again, and not just use this space to showcase some of my work. ","title":"Hello, World!","url":"http://kylewbanks.com/blog/Hello-World","author":"Kyle Banks","id":30,"tags":[]},{"body":"<p><i>See the update at the bottom for the Mac OS implementation.</i></p>\r\n<p>\r\nA common issue I have seen with various code snippets around the internet is that developers are unwittingly downloading images synchronously in iOS (or Mac OS for that matter) apps, causing the application to freeze as the main UI thread is blocked. This is poor practice for a number of reasons, but the main issue is that the app appears to be unresponsive while the image is downloaded. Depending on the connection of the device, this can severely harm the usability of your application.\r\n</p>\r\n\r\n<p>\r\nThe most common way that I have seen this done is so: \r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n//Do NOT do this!\r\n[UIImage imageWithData:[NSData dataWithContentsOfURL:myImageURL]];\r\n</pre>\r\n\r\n<p>\r\n<b>+ (NSData *) dataWithContentsOfURL:(NSURL *)url;</b> returns data from a URL, which is what we want, but it does it synchronously. Do not use this method for downloading remote data!\r\n</p>\r\n\r\n<p>\r\nI have developed what I believe to be a better, and still simple solution (although admittedly lacking more advanced features like caching) that I use in almost all of my projects that do not require anything complicated (again, caching). This simple class handles the image download asynchronously, and uses <a href=\"http://developer.apple.com/library/ios/#documentation/cocoa/Conceptual/Blocks/Articles/00_Introduction.html\">blocks</a> to inform you when the image download completes or fails.\r\n</p>\r\n\r\n<p>Usage is simple, you just initialize the <b>AsyncImageDownloader</b> with a URL, and success/failure blocks. You can instruct the AsyncImageDownloader to start downloading immediately, or assign the downloader to a variable and start the download when you are ready.</p>\r\n\r\n<pre class=\"prettyprint\">\r\nUIImageView *myImageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];\r\n\t\r\n[[[AsyncImageDownloader alloc] initWithMediaURL:@\"http://example.com/awesome_pic.jpg\" successBlock:^(UIImage *image)  {\r\n      [myImageView setImage:image];\r\n} failBlock:^(NSError *error) {\r\n      NSLog(@\"Failed to download image due to %@!\", error);\r\n}] startDownload];\r\n</pre>\r\n\r\n<p>\r\n<a href=\"https://github.com/KyleBanks/AsyncImageDownloader\">Clone the source from GitHub</a>, use it, change it, do whatever you like with it. If you have any suggestions for improvements, feel free to leave me a message in the comments! Keep in mind that this class is meant to be very barebones and light-weight. If you want more advanced features like caching, there are many options available to you including my personal favourite <a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a>. \r\n</p>\r\n\r\n<p>Note that at this time, the AsyncImageDownloader will not work in Mac OS. It would be very easy to port it over, and I may get around to doing so in the near future. If not, I encourage anybody to port it over and put it up somewhere for the community to access.</p>\r\n\r\n<h3>Update</h3>\r\n<p>\r\nGithub user <a href=\"https://github.com/nicoschtein\" target=\"_BLANK\">nicoschtein</a> pushed a pull request to offer asynchronous downloading of any data type, not just images. The class works exactly the same as before, but now offers more flexibility and reuse for non-image downloads.\r\n</p>\r\n\r\n<h3>Update 2 - Mac OS Implementation</h3>\r\n<p>\r\nI have added a Mac OS version of <b>AsyncImageDownloader</b> to the <a href=\"https://github.com/KyleBanks/AsyncImageDownloader\">GitHub repo</a>. The syntax to use it is almost identical, however you replace <b>UIImage</b> with <b>NSImage</b>, like so:\r\n<pre class=\"prettyprint\">\r\nNSImageView *myImageView = ...;\r\n\t\r\n[[[AsyncImageDownloader alloc] initWithMediaURL:@\"http://example.com/awesome_pic.jpg\" successBlock:^(NSImage *image)  {\r\n      [myImageView setImage:image];\r\n} failBlock:^(NSError *error) {\r\n      NSLog(@\"Failed to download image due to %@!\", error);\r\n}] startDownload];\r\n</pre>\r\n</p>\r\n\r\n<h3>Update 3 - CocoaPods</h3>\r\n<p>\r\nI've published the <b>AsyncImageDownloader</b> to CocoaPods, making it even easier to integrate the library into your project. Read more about setting that up, <a href=\"http://kylewbanks.com/blog/AsyncImageDownloader-Published-to-CocoaPods\">right here</a>.\r\n</p>","date":"10/14/2013 00:01 AM","preview":"A common issue I have seen with various code snippets around the internet is that developers are unwittingly downloading images synchronously in iOS (or Mac OS for that matter) apps, causing the application to freeze as the main UI thread is blocked. This is poor practice for a number of reasons, but the main issue is that the app appears to be unresponsive while the image is downloaded. Depending on the connection of the device, this can severely harm the usability of your application.","title":"Asynchronous Image Downloading in iOS and Mac OS with Objective-C","url":"http://kylewbanks.com/blog/iOS-Async-Image-Downloader","author":"Kyle Banks","id":31,"tags":[]},{"body":"<p><i><b>If you are looking for XOR encryption for other languages, including C, C#,\r\nDart,\r\nGroovy,\r\nJava (Android Compatible),\r\nJavaScript,\r\nObjective-C,\r\nand Python, I have made them available at this <a href=\"https://github.com/KyleBanks/XOREncryption\">GitHub repo</a>.</b></i></p>\r\n\r\n<p>XOR encryption (or Exclusive-OR encryption) is a common method of encrypting text into a format that cannot be trivially cracked by the average person. XOR encryption is great for storing things like game save data, and other data types that are stored locally on a users computer, that while not a big deal if they are tampered with, you would like to deter people from doing so. XOR encryption is also used often as a part of more complex encryption algorithms.</p>\r\n\r\n<p>The idea behind it is that if you don't know the original character or the XOR encryption key, it is impossible to determine what either one is. However, the reason that it is not entirely secure is that data almost always contains patterns (JSON uses '{' and '}' characters, XML contains plenty of '&lt;' and '&gt;' characters, etc.) so if someone is able to determine the pattern and unlock even one character, they will have the key to unlocking everything else.</p>\r\n\r\n<p>\r\nHowever secure or insecure XOR encryption really is, it has plenty of valid use cases. Any kind of deterrent added to data that you don't want users to tamper with but that they will have easy access to is a prime candidate, so long as security isn't paramount.\r\n</p>\r\n\r\n<p>The concept is simple, you define a key character, and for every character in the string you want to encrypt, you apply the key. Once you want to unencrypt the encrypted data, you simply go through the string and apply the key again.</p>\r\n\r\n<p>Here's a very simple implementation in C++, which uses the <b>^</b> character for XOR:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n#include &lt;iostream&gt;\r\n\r\nusing namespace std;\r\n\r\nstring encryptDecrypt(string toEncrypt) {\r\n    char key = 'K'; //Any char will work\r\n    string output = toEncrypt;\r\n    \r\n    for (int i = 0; i < toEncrypt.size(); i++)\r\n        output[i] = toEncrypt[i] ^ key;\r\n    \r\n    return output;\r\n}\r\n\r\nint main(int argc, const char * argv[])\r\n{\r\n    string encrypted = encryptDecrypt(\"kylewbanks.com\");\r\n    cout << \"Encrypted:\" << encrypted << \"\\n\";\r\n    \r\n    string decrypted = encryptDecrypt(encrypted);\r\n    cout << \"Decrypted:\" << decrypted << \"\\n\";\r\n    \r\n    return 0;\r\n}\r\n</pre>\r\n\r\nAnd here's the output: \r\n\r\n<pre class=\"prettyprint\">\r\nEncrypted: 2&#39;.<)*% 8e($&amp;\r\nDecrypted:kylewbanks.com\r\n</pre>\r\n\r\n<p>As you can see, the encrypted string looks like gibberish, and would deter non-technical people from bothering to tamper with the file. However, if you run something through that algorithm with repetitive characters (JSON, XML, etc.), more tech-savvy individuals may be able to pick up on what you are doing. While you can't quite make it unbreakable, you can make it ridiculously hard to brute-force by using multiple keys in a pattern like so:</p>\r\n\r\n<pre class=\"prettyprint\">\r\nstring encryptDecrypt(string toEncrypt) {\r\n    char key[3] = {'K', 'C', 'Q'}; //Any chars will work\r\n    string output = toEncrypt;\r\n    \r\n    for (int i = 0; i < toEncrypt.size(); i++)\r\n        output[i] = toEncrypt[i] ^ key[i % (sizeof(key) / sizeof(char))];\r\n    \r\n    return output;\r\n}\r\n</pre>\r\n\r\n<p>\r\nThere are two differences here:\r\n</p>\r\n<ol>\r\n<li><b>key</b> is now defined as a char array.</li>\r\n<li>We now use the char at index modulos the size of the key array to XOR, rather than the same key for each character to encrypt.</li>\r\n</ol>\r\n<p>Now running the same string through there, we get the following output:</p>\r\n<pre class=\"prettyprint\">\r\nEncrypted: :=.43*-:8m2$.\r\nDecrypted:kylewbanks.com\r\n</pre>\r\n\r\n<p>\r\nIt doesn't look that much more secure, but the reason for using multiple keys rather than just one, is that for each additional key you use, you effectively double the amount of time it takes to brute force the encrypted string. \r\n</p>\r\n\r\n<p><b><a href=\"https://github.com/KyleBanks/XOREncryption\">Full source in a variety of languages available on GitHub.</a></b></p>","date":"10/10/2013 00:01 AM","preview":"XOR encryption (or Exclusive-OR encryption) is a common method of encrypting text into a format that cannot be trivially cracked by the average person. XOR encryption is great for storing things like game save data, and other data types that are stored locally on a users computer, that while not a big deal if they are tampered with, you would like to deter people from doing so. XOR encryption is also used often as a part of more complex encryption algorithms.","title":"Simple XOR Encryption/Decryption in C++","url":"http://kylewbanks.com/blog/Simple-XOR-Encryption-Decryption-in-Cpp","author":"Kyle Banks","id":32,"tags":[]},{"body":"<p>\r\nI've been working on a very simple Android app that fetches and displays blog posts from my site. As I was developing the app, I decided that it would probably be of more use to show people the source code than to actually release the app on Google Play, seeing as how a mobile device isn't the greatest way to view code snippets.\r\n</p>\r\n\r\n<p>\r\nThe source is up on <a href=\"https://github.com/KyleBanks/kylewbanks.com-AndroidApp\">GitHub</a> and it's basically an extension of my <a href=\"http://kylewbanks.com/blog/Tutorial-Android-Parsing-JSON-with-GSON\">previous post</a> about fetching and parsing JSON using the GSON library.\r\n</p>\r\n\r\n<p>\r\nThe new app takes it to the next step by displaying the posts in a nicely styled <b>ListView</b> and allows the user view the full post by selecting it from the list. The source code should offer some help to people looking to use their own fonts, multiple activities, custom animations, and their own <b>Application</b> object.\r\n</p>\r\n\r\n<p>\r\nIn addition to the source code, I've written a few posts on some of the more exciting parts of the application, and walking through the steps of implementing them:\r\n</p>\r\n<ul>\r\n<li><a href=\"http://kylewbanks.com/blog/Tutorial-Implementing-a-Client-Side-Cache-using-the-SQLite-Database-on-Android-and-SQLiteOpenHelper\">Tutorial: Implementing a Client Side Cache using the SQLite Database on Android and SQLiteOpenHelper</a></li>\r\n<li><a href=\"http://kylewbanks.com/blog/Implementing-Google-Plus-Style-ListView-Animations-on-Android\">Implementing Google Plus Style ListView Animations on Android</a></li>\r\n<li><a href=\"http://kylewbanks.com/blog/Applying-Custom-TTF-Fonts-in-an-Android-Application-Using-Typeface\">Applying Custom TTF Fonts in an Android Application Using Typeface</a></li>\r\n</ul>\r\n\r\n<p>Here are a few screenshots of what you can expect to see in the app:</p>\r\n<img src=\"https://s3.amazonaws.com/kylewbanks/app_screenshots.png\" width=\"740\" height=\"640\" alt=\"Screenshots of the KyleWBanks.com Android App\" />\r\n<p>\r\nCheck it out on <a href=\"https://github.com/KyleBanks/kylewbanks.com-AndroidApp\">GitHub</a>.\r\n</p>","date":"10/12/2013 00:01 AM","preview":"I've been working on a very simple Android app that fetches and displays blog posts from my site. As I was developing the app, I decided that it would probably be of more use to show people the source code than to actually release the app on Google Play, seeing as how a mobile device isn't the greatest way to view code snippets.","title":"Open Sourced: KyleWBanks.com Android App","url":"http://kylewbanks.com/blog/Open-Sourced-KyleWBanks-Android-App","author":"Kyle Banks","id":33,"tags":[]},{"body":"<p>\r\nIn a previous post I mentioned how you can use <a href=\"http://kylewbanks.com/blog/Tutorial-Android-Parsing-JSON-with-GSON\">GSON to parse JSON into Java models on Android</a>, allowing you to communicate with a remote server and make use of the data it provides you.\r\n</p>\r\n\r\n<p>\r\nThe post was limited in that the example application would fetch the entire list of remote data every time the application started, putting stress on both the application and the server handling the request. It would be much more efficient to cache the data on the application side, and only request data that has actually been updated or newly created.\r\n</p>\r\n\r\n<p>\r\n<a href=\"http://www.sqlite.org/\">SQLite</a> is a public domain database engine that is designed to be incredibly minimal and simplistic, with a tiny footprint, making it a perfect candidate for mobile devices. Luckily for us, Android comes equipped with the database out of the box, and a very handy library for interacting with it.\r\n</p>\r\n\r\n<h3 class=\"title\">The Model</h3>\r\n\r\n<p>\r\nTaking the models from the previously mentioned post, we will be modelling a blog's <b>Post</b> object:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npublic class Post {\r\n\r\n    private long _id;\r\n\r\n    private String _title;\r\n    private String _preview;\r\n    private String _body;\r\n    private String _url;\r\n\r\n    private Date _date;\r\n\r\n    //Various constructors, accessors, mutators, etc.\r\n}\r\n</pre>\r\n\r\n<h3 class=\"title\">The Database Wrapper</h3>\r\n<p>\r\nAs mentioned in the title, we will implement the <b>SQLiteOpenHelper</b> class in order to create and update our database on the fly. There are two important properties to this class, and two important methods:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npublic class DatabaseWrapper extends SQLiteOpenHelper {\r\n\r\n    private static final String TAG = \"DatabaseWrapper\";\r\n\r\n    private static final String DATABASE_NAME = \"MyDatabase.db\";\r\n    private static final int DATABASE_VERSION = 1;\r\n\r\n    public DatabaseWrapper(Context context) {\r\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\r\n    }\r\n\r\n    /**\r\n     * Called if the database named DATABASE_NAME doesn't exist in order to create it.\r\n     */\r\n    @Override\r\n    public void onCreate(SQLiteDatabase sqLiteDatabase) {\r\n        Log.i(TAG, \"Creating database [\" + DATABASE_NAME + \" v.\" + DATABASE_VERSION + \"]...\");\r\n        //TODO: Create the Database\r\n    }\r\n\r\n    /**\r\n     * Called when the DATABASE_VERSION is increased.\r\n     */\r\n    @Override\r\n    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {\r\n        Log.i(TAG, \"Upgrading database [\"+DATABASE_NAME+\" v.\" + oldVersion+\"] to [\"+DATABASE_NAME+\" v.\" + newVersion+\"]...\");\r\n    }\r\n}\r\n</pre>\r\n\r\n<p>\r\nThere are two important properties in this class that are pretty self-explanatory:\r\n</p>\r\n<ul>\r\n\t<li><b>DATABASE_NAME</b>: The name of the Database</li>\r\n\t<li><b>DATABASE_VERSION</b>: The version of the Database</li>\r\n</ul>\r\n\r\n<p>The method <b>onCreate</b> will be called if the database named <b>DATABASE_NAME</b> doesn't exist so that you can create it, and the method <b>onUpgrade</b> will be called if the <b>DATABASE_VERSION</b> has been increased since last time the database was accessed, allowing you to migrate to your newer database design or recreate the database altogether if you wish.</p>\r\n<p>\r\nWe will come back to these methods shortly.\r\n</p>\r\n\r\n<h3 class=\"title\">Creating a Custom ORM</h3>\r\n\r\n<p>\r\nAn Object-Relational Mapper (or <b>ORM</b>) is a technique for transferring data between types, and is something we will implement for our <b>Post</b> class. The reason for implementing the ORM is it makes maintaining <b>SQL</b> queries and column-to-property mapping much simpler. Our ORM will be very simple, and consist of just a few methods to fetch, insert, update and delete posts from the database.\r\n</p>\r\n\r\n<p>\r\nThe first step is to define our schema so that we can create our database:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npublic class PostORM {\r\n\r\n    private static final String TAG = \"PostORM\";\r\n\r\n    private static final String TABLE_NAME = \"post\";\r\n\r\n    private static final String COMMA_SEP = \", \";\r\n\r\n    private static final String COLUMN_ID_TYPE = \"INTEGER PRIMARY KEY\";\r\n    private static final String COLUMN_ID = \"id\";\r\n\r\n    private static final String COLUMN_TITLE_TYPE = \"TEXT\";\r\n    private static final String COLUMN_TITLE = \"title\";\r\n\r\n    private static final String COLUMN_PREVIEW_TYPE = \"TEXT\";\r\n    private static final String COLUMN_PREVIEW = \"preview\";\r\n\r\n    private static final String COLUMN_BODY_TYPE = \"TEXT\";\r\n    private static final String COLUMN_BODY = \"body\";\r\n\r\n    private static final String COLUMN_URL_TYPE = \"TEXT\";\r\n    private static final String COLUMN_URL = \"url\";\r\n\r\n    private static final String COLUMN_DATE_TYPE = \"TEXT\";\r\n    private static final String COLUMN_DATE = \"pubdate\";\r\n\r\n\r\n    public static final String SQL_CREATE_TABLE =\r\n            \"CREATE TABLE \" + TABLE_NAME + \" (\" +\r\n                COLUMN_ID + \" \" + COLUMN_ID_TYPE + COMMA_SEP +\r\n                COLUMN_TITLE  + \" \" + COLUMN_TITLE_TYPE + COMMA_SEP +\r\n                COLUMN_PREVIEW + \" \" + COLUMN_PREVIEW_TYPE + COMMA_SEP +\r\n                COLUMN_BODY + \" \" + COLUMN_BODY_TYPE + COMMA_SEP +\r\n                COLUMN_URL + \" \" + COLUMN_URL_TYPE + COMMA_SEP +\r\n                COLUMN_DATE + \" \" + COLUMN_DATE_TYPE +\r\n            \")\";\r\n\r\n    public static final String SQL_DROP_TABLE =\r\n            \"DROP TABLE IF EXISTS \" + TABLE_NAME;\r\n}\r\n</pre>\r\n\r\n<p>\r\nWe defined the <b>TABLE_NAME</b> and a series of columns with associated data-types, as well as a <b>CREATE TABLE</b> SQL statement based on these columns, and a <b>DROP TABLE</b> statement. With these defined, we can go back to the <b>DatabaseWrapper</b> class and implement the <b>onCreate</b> and <b>onUpgrade</b> methods.\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npublic class DatabaseWrapper extends SQLiteOpenHelper {\r\n\r\n\t...\r\n\r\n    @Override\r\n    public void onCreate(SQLiteDatabase sqLiteDatabase) {\r\n        Log.i(TAG, \"Creating database [\" + DATABASE_NAME + \" v.\" + DATABASE_VERSION + \"]...\");\r\n\r\n        sqLiteDatabase.execSQL(PostORM.SQL_CREATE_TABLE);\r\n        sqLiteDatabase.close();\r\n    }\r\n\r\n    @Override\r\n    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {\r\n        Log.i(TAG, \"Upgrading database [\"+DATABASE_NAME+\" v.\" + oldVersion+\"] to [\"+DATABASE_NAME+\" v.\" + newVersion+\"]...\");\r\n\r\n        sqLiteDatabase.execSQL(PostORM.SQL_DROP_TABLE);\r\n        onCreate(sqLiteDatabase);\r\n    }\r\n}\r\n</pre>\r\n\r\n<p>\r\nWhen creating the table we simply execute the <b>CREATE TABLE</b> statement that we wrote earlier, however when upgrading the data we drop the table and recreate it. The reason I chose to do it this way instead of actually migrating to a new database design is because writing the appropriate SQL to update through all versions between the current version of the database and the version you are trying to migrate to can be very tedious. For a client side cache that is used simply for reducing network use, it didn't seem worth it. If you'd prefer to manage all that data migration, that is entirely up to you.\r\n</p>\r\n\r\n<p>\r\nAnyways, now that the Database is in place, we can start actually inserting data. Here's how that looks for our <b>Post</b> model:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npublic class PostORM {\r\n\r\n\t...\r\n\r\n    public static void insertPost(Context context, Post post) {\r\n        DatabaseWrapper databaseWrapper = new DatabaseWrapper(context);\r\n        SQLiteDatabase database = databaseWrapper.getWritableDatabase();\r\n\r\n        ContentValues values = postToContentValues(post);\r\n        long postId = database.insert(PostORM.TABLE_NAME, \"null\", values);\r\n        Log.i(TAG, \"Inserted new Post with ID: \" + postId);\r\n\r\n        database.close();\r\n    }\r\n\r\n    /**\r\n     * Packs a Post object into a ContentValues map for use with SQL inserts.\r\n     */\r\n    private static ContentValues postToContentValues(Post post) {\r\n        ContentValues values = new ContentValues();\r\n        values.put(PostORM.COLUMN_ID, post.getId());\r\n        values.put(PostORM.COLUMN_TITLE, post.getTitle());\r\n        values.put(PostORM.COLUMN_PREVIEW, post.getPreview());\r\n        values.put(PostORM.COLUMN_BODY, post.getBody());\r\n        values.put(PostORM.COLUMN_URL, post.getUrl());\r\n        values.put(PostORM.COLUMN_DATE, _dateFormat.format(post.getDate()));\r\n\r\n        return values;\r\n    }\r\n}\r\n</pre>\r\n\r\n<p>\r\nFirst we get a hold of the <b>SQLiteDatabase</b> in write mode through our <b>DatabaseWrapper</b>. Once the database is available to us, we pack the <b>Post</b> object into a <b>ContentValues</b> map with the appropriate column names used as the key for each property. After that, we are free to insert the <b>Post</b> into the database. Using the <b>PostORM</b> class to insert a <b>Post</b> into the database is now simple:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\nPost post = new Post();\r\n...\r\nPostORM.insertPost(context, post);\r\n</pre>\r\n\r\n<p>\r\nWith inserts in place, let's fetch a list of all <b>Posts</b> in the database:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npublic class PostORM {\r\n\r\n\t...\r\n\r\n    private static final SimpleDateFormat _dateFormat = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH);\r\n\r\n    public static List&lt;Post&gt; getPosts(Context context) {\r\n        DatabaseWrapper databaseWrapper = new DatabaseWrapper(context);\r\n        SQLiteDatabase database = databaseWrapper.getReadableDatabase();\r\n\r\n        Cursor cursor = database.rawQuery(\"SELECT * FROM \" + PostORM.TABLE_NAME, null);\r\n\r\n        Log.i(TAG, \"Loaded \" + cursor.getCount() + \" Posts...\");\r\n        List&lt;Post&gt; postList = new ArrayList&lt;Post&gt;();\r\n\r\n        if(cursor.getCount() > 0) {\r\n            cursor.moveToFirst();\r\n            while (!cursor.isAfterLast()) {\r\n                Post post = cursorToPost(cursor);\r\n                postList.add(post);\r\n                cursor.moveToNext();\r\n            }\r\n            Log.i(TAG, \"Posts loaded successfully.\");\r\n        }\r\n\r\n        database.close();\r\n\r\n        return postList;\r\n    }\r\n\r\n    /**\r\n     * Populates a Post object with data from a Cursor\r\n     * @param cursor\r\n     * @return\r\n     */\r\n    private static Post cursorToPost(Cursor cursor) {\r\n        Post post = new Post();\r\n        post.setId(cursor.getLong(cursor.getColumnIndex(COLUMN_ID)));\r\n        post.setTitle(cursor.getString(cursor.getColumnIndex(COLUMN_TITLE)));\r\n        post.setPreview(cursor.getString(cursor.getColumnIndex(COLUMN_PREVIEW)));\r\n        post.setBody(cursor.getString(cursor.getColumnIndex(COLUMN_BODY)));\r\n        post.setUrl(cursor.getString(cursor.getColumnIndex(COLUMN_URL)));\r\n\r\n        String date = cursor.getString(cursor.getColumnIndex(COLUMN_DATE));\r\n        try {\r\n            post.setDate(_dateFormat.parse(date));\r\n        } catch (ParseException ex) {\r\n            Log.e(TAG, \"Failed to parse date \" + date + \" for Post \" + post.getId());\r\n            post.setDate(null);\r\n        } \r\n\r\n        return post;\r\n    }\r\n}\r\n</pre>\r\n\r\n<p>\r\nSimilar to inserting a <b>Post</b>, the first step is to get a handle on the database, except this time we get it in read mode. Once available, we query the database for all posts. <b>SELECT</b> queries return a <b>Cursor</b> object which allows you to iterate through it and retrieve values from each column it contains. In the <b>cursorToPost</b> method we create a <b>Post</b> object from the values stored in the <b>Cursor</b> by retrieving properties based on the index of their applicable column. This method will also be handy in the future if you implement other queries such as finding a post by it's <b>id</b> or finding all posts between a certain data range, for example.\r\n</p>\r\n\r\n<p>\r\nBy now you should be well on your way to implementing a client-side cache in your Android application. Let me know in the comments if you would like to see examples of <b>UPDATE</b> and <b>DELETE</b> statements. As always, the source is available <a href=\"https://github.com/KyleBanks/kylewbanks.com-AndroidApp/tree/master/KyleWBanks/src/main/java/com/kylewbanks/database\">on Github</a> as part of a larger project I'm working on.\r\n</p>","date":"10/12/2013 00:01 AM","preview":"SQLite is a public domain database engine that is designed to be incredibly minimal and simplistic, with a tiny footprint, making it a perfect candidate for mobile devices. Luckily for us, Android comes equipped with the database out of the box, and a very handy library for interacting with it.","title":"Tutorial: Implementing a Client Side Cache using the SQLite Database on Android and SQLiteOpenHelper","url":"http://kylewbanks.com/blog/Tutorial-Implementing-a-Client-Side-Cache-using-the-SQLite-Database-on-Android-and-SQLiteOpenHelper","author":"Kyle Banks","id":34,"tags":[]},{"body":"<hr /><p>\n<b>UPDATE: I have published an Android library called <a href=\"https://github.com/KyleBanks/AnimatedListView\">AnimatedListView</a> that accomplishes the goal of this very post. If you would prefer to use the library than implement it yourself, read <a href=\"http://kylewbanks.com/blog/Open-Sourced-AnimatedListView-Android-Library\">this post</a> for instructions.</b>\n</p><hr />\n\n<p>\nGoogle Plus style <b>ListViews</b> are all the rage these days on Android because of the slick animations it displays when presenting data. When a user scrolls down, new items animate up into view, and quite frankly it looks awesome. In my <a href=\"http://kylewbanks.com/blog/Open-Sourced-KyleWBanks-Android-App\">latest app</a> I decided to implement the same style animation, and it turned out to be very easy to implement. I also decided to implement an animation when scrolling up in the <b>ListView</b> so that the rows animate down into view.\n</p>\n\n<h3 class=\"title\">Animations</h3>\n<p>\nThe first thing to do is to define the animations, and put them in your <b>res/anim/</b> folder:\n</p>\n\n<b>up_from_bottom.xml</b>\n<pre class=\"prettyprint\">\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:shareInterpolator=\"@android:anim/decelerate_interpolator\"&gt;\n    &lt;translate\n        android:fromXDelta=\"0%\" android:toXDelta=\"0%\"\n        android:fromYDelta=\"100%\" android:toYDelta=\"0%\"\n        android:duration=\"400\" /&gt;\n&lt;/set&gt;\n</pre>\n\n<b>down_from_top.xml</b>\n<pre class=\"prettyprint\">\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:shareInterpolator=\"@android:anim/decelerate_interpolator\"&gt;\n    &lt;translate\n        android:fromXDelta=\"0%\" android:toXDelta=\"0%\"\n        android:fromYDelta=\"-100%\" android:toYDelta=\"0%\"\n        android:duration=\"400\" /&gt;\n&lt;/set&gt;\n</pre>\n\n<p>\nThe only difference in these animations is the <b>fromYDelta</b> which is 100% and -100%, respectively.\n</p>\n\n<h3 class=\"title\">Applying Animations to ListView Rows</h3>\n<p>\nNow that the animations are defined, we can implement them on our <b>ListView</b> rows. In your <b>ListView's</b> adapter, add the following code: \n</p>\n\n<pre class=\"prettyprint\">\nprivate int lastPosition = -1;\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n    //Load your view, populate it, etc...\n    View view = ...;\n\n    Animation animation = AnimationUtils.loadAnimation(getContext(), (position > lastPosition) ? R.anim.up_from_bottom : R.anim.down_from_top);\n    view.startAnimation(animation);\n    lastPosition = position;\n\n    return view;\n}\n</pre>\n\n<p>\nWhat this does it check if the position of the view that is being loaded is higher or lower then the last view that was loaded. With this information, we can determine if the user is scrolling up or down, and animate accordingly. If the user scrolls up, the view will animate down into place, and if they scroll down it will animate up into place. Originally I had played around with listening to <b>onScrollChanged</b> events on the <b>ListView</b>, but this actually turned out to be more reliable.\n</p>\n\n<p>\nWell there you have it, a very lightweight implementation of a Google Plus style <b>ListView</b> animation. I may release this as a library project, but the code is so minimal that it almost doesn't seem worth it. For now, you can check out the full source on <a href=\"https://github.com/KyleBanks/kylewbanks.com-AndroidApp/blob/master/KyleWBanks/src/main/java/com/kylewbanks/view/adapter/PostListAdapter.java\">GitHub</a>, or download the project and try it out.\n</p>","date":"10/12/2013 00:01 AM","preview":"Google Plus style ListViews are all the rage these days on Android because of the slick animations it displays when presenting data. When a user scrolls down, new items animate up into view, and quite frankly it looks awesome. In my latest app I decided to implement the same style animation, and it turned out to be very easy to implement. I also decided to implement an animation when scrolling up in the ListView so that the rows animate down into view.","title":"Implementing Google Plus Style ListView Animations on Android","url":"http://kylewbanks.com/blog/Implementing-Google-Plus-Style-ListView-Animations-on-Android","author":"Kyle Banks","id":35,"tags":[]},{"body":"<p>\nSomething that is very common in user interface design is to have a repeating background image on your views. The image is normally very small, and repeats across your view's background to give it more texture or style than a flat background color. This trick is often used for simple gradients, providing better performance than programmatically drawing the gradient on the view, but it can also be used for textures or more complicated gradients to save time coding them. The size of your image will vary based on the complexity of the background, but you will generally want to create the smallest image (square or rectangle) that contains the entire pattern you want to repeat.\n</p>\n\n<h4>Android</h4>\n<p>\nIn order to achieve this effect, you can use the following code.\n</p>\n\n<pre class=\"prettyprint\">\nView view = (View) findViewById(R.id.my_view);\n\n//Repeating background image\nBitmap backgroundImage = BitmapFactory.decodeResource(getResources(), R.drawable.my_background_image);\nBitmapDrawable bitmapDrawable = new BitmapDrawable(getResources(), backgroundImage);\nbitmapDrawable.setTileModeXY(Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);  \nview.setBackground(bitmapDrawable);\n</pre>\n\n<p>\nEssentially what you are doing is getting a handle on the image <b>my_background_img</b>, and instructing it to be drawn repeated on the X and Y axis. You then pass these instructions to the view in <b>View.setBackground(Drawable d);</b> and you have successfully created a repeating background image.\n</p>\n\n<p>\n<b>Note:</b> Prior to API Level 16, you will need to use <b>View.setBackgroundDrawable(Drawable d);</b>\n</p>\n\n\n<h4>iPhone and iPad</h4>\n<p>\nThe code for iOS developers is more or less the same, but with one convenience function for the task.\n</p>\n\n<pre class=\"prettyprint\">\nUIView *myView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];\n\n//Repeating background image\nUIImage *repeatingImage = [UIImage imageNamed:@\"my_background_image\"];\nUIColor *repeatingBackground = [UIColor colorWithPatternImage:repeatingImage];\n[myView setBackgroundColor:repeatingBackground];\n</pre>\n\n<p>\nNotice that <b>+ [UIColor colorWithPatternImage:(UIImage *)image];</b> helps us out by returning a simple <b>UIColor</b> that can be used on any <b>UIView</b> subclass to draw the repeating image. \n</p>\n\n<p>And there you have it, two simple ways to get a very professional look and feel for your applications on both Android and iOS devices.</p>","date":"2/28/2013 00:01 AM","preview":"\nSomething that is very common in user interface design is to have a repeating background image on your views. The image is normally very small, and repeats across your view's background to give it more texture or style than a flat background color. This trick is often used for simple gradients, providing better performance than programmatically drawing the gradient on the view, but it can also be used for textures or more complicated gradients to save time coding them. The size of your image will vary based on the complexity of the background, but you will generally want to create the smallest image (square or rectangle) that contains the entire pattern you want to repeat.\n","title":"Repeating Background Image on Android, iPhone, and iPad","url":"http://kylewbanks.com/blog/Android-iOS-Repeating-Background-Image","author":"Kyle Banks","id":36,"tags":[]},{"body":"<p>\nPreviously I <a href=\"http://kylewbanks.com/blog/Implementing-Google-Plus-Style-ListView-Animations-on-Android\">wrote about</a> how to animate views into place using a <b>ListView</b> on Android, similar to how Google does it in their Google Plus app. I decided to publish an Android library that manages the animations for you, allowing you to easily integrate it into any project. \n</p>\n\n<h3 class=\"title\">Download and Setup</h3>\n<p>\nFirst off, download the <a href=\"https://github.com/KyleBanks/AnimatedListView\">AnimatedListView library from GitHub</a>, and add it to your project as a Library. If you are unsure of how to do this, do a quick Google search based on your IDE and you will find tutorials covering the subject. Alternatively, you could just copy the source packages (<b>com.kylewbanks.animlv.*</b>) into your project, as there are no resources required by this library.\n</p>\n\n<p>\nOnce you have the Library set up, you can define an <b>AnimatedListView</b> in your layout XML like so: \n</p>\n\n<pre class=\"prettyprint\">\n&lt;com.kylewbanks.animlv.AnimatedListView\n    android:id=\"@+id/my_list\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" /&gt;\n</pre>\n\n<p>\nAnd reference it from Java like any other XML layout:\n</p>\n\n<pre class=\"prettyprint\">\nAnimatedListView animatedListView = (AnimatedListView) findViewById(R.id.my_list);\n</pre>\n\n<h3>Using the AnimatedListView</h3>\n<p>\nWith a reference to the <b>AnimatedListView</b>, we can now supply it with data to present using an <b>AnimatedListViewAdapter</b>. Here is an example with a list of <b>Post</b> objects:\n</p>\n\n<pre class=\"prettyprint\">\n//Resource ID of the View for each item in your ListView\nprivate int viewResourceId = R.layout.post_list_item;\n\n//Display data in the AnimatedListView\nprivate void displayListView(List&lt;Post&gt; postList) {\n    //Create an AnimatedListViewAdapter that will manage the data and animations\n    AnimatedListViewAdapter postListAdapter = new AnimatedListViewAdapter(getContext(), viewResourceId, postList, objectMapper);\n\n    //Tell the AnimatedListView to use the adapter\n    animatedListView.setAdapter(postListAdapter);\n}\n\n// Called to populate a View with the data of 'object'\nprivate AnimatedListViewObjectMapper objectMapper = new AnimatedListViewObjectMapper() {\n    @Override\n    public void bindObjectToView(Object object, View view) {\n        Post post = (Post) object;\n        //Populate and stylize the view however you want...\n    }\n};\n</pre>\n\n<p>\nAs you can see it works very similarly to a normal <b>ArrayAdapter</b> with one difference being that you supply an <b>AnimatedListViewObjectMapper</b> object that will be called with each item in your list, and a <b>View</b> to populate. For example, you could set the view to display the title of the <b>Post</b> object, or color it based on if the user has read the post, etc.\n</p>\n\n<p>\nFor now (Version 0.1), the animations are fixed. In future versions I will make it possible to modify the duration of the animation, which animations to do, when to animate, etc. \n</p>\n\n<p>\n<a href=\"https://github.com/KyleBanks/AnimatedListView\">Get the source on GitHub!</a>\n</p>Previously I <a href=\"http://kylewbanks.com/blog/Implementing-Google-Plus-Style-ListView-Animations-on-Android\">wrote about</a> how to animate views into place using a <b>ListView</b> on Android, similar to how Google does it in their Google Plus app. I decided to publish an Android library that manages the animations for you, allowing you to easily integrate it into any project. \n</p>\n\n<h3 class=\"title\">Download and Setup</h3>\n<p>\nFirst off, download the <a href=\"https://github.com/KyleBanks/AnimatedListView\">AnimatedListView library from GitHub</a>, and add it to your project as a Library. If you are unsure of how to do this, do a quick Google search based on your IDE and you will find tutorials covering the subject. Alternatively, you could just copy the source packages (<b>com.kylewbanks.animlv.*</b>) into your project, as there are no resources required by this library.\n</p>\n\n<p>\nOnce you have the Library set up, you can define an <b>AnimatedListView</b> in your layout XML like so: \n</p>\n\n<pre class=\"prettyprint\">\n&lt;com.kylewbanks.animlv.AnimatedListView\n    android:id=\"@+id/my_list\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" /&gt;\n</pre>\n\n<p>\nAnd reference it from Java like any other XML layout:\n</p>\n\n<pre class=\"prettyprint\">\nAnimatedListView animatedListView = (AnimatedListView) findViewById(R.id.my_list);\n</pre>\n\n<h3>Using the AnimatedListView</h3>\n<p>\nWith a reference to the <b>AnimatedListView</b>, we can now supply it with data to present using an <b>AnimatedListViewAdapter</b>. Here is an example with a list of <b>Post</b> objects:\n</p>\n\n<pre class=\"prettyprint\">\n//Resource ID of the View for each item in your ListView\nprivate int viewResourceId = R.layout.post_list_item;\n\n//Display data in the AnimatedListView\nprivate void displayListView(List&lt;Post&gt; postList) {\n    //Create an AnimatedListViewAdapter that will manage the data and animations\n    AnimatedListViewAdapter postListAdapter = new AnimatedListViewAdapter(getContext(), viewResourceId, postList, objectMapper);\n\n    //Tell the AnimatedListView to use the adapter\n    animatedListView.setAdapter(postListAdapter);\n}\n\n// Called to populate a View with the data of 'object'\nprivate AnimatedListViewObjectMapper objectMapper = new AnimatedListViewObjectMapper() {\n    @Override\n    public void bindObjectToView(Object object, View view) {\n        Post post = (Post) object;\n        //Populate and stylize the view however you want...\n    }\n};\n</pre>\n\n<p>\nAs you can see it works very similarly to a normal <b>ArrayAdapter</b> with one difference being that you supply an <b>AnimatedListViewObjectMapper</b> object that will be called with each item in your list, and a <b>View</b> to populate. For example, you could set the view to display the title of the <b>Post</b> object, or color it based on if the user has read the post, etc.\n</p>\n\n<p>\nFor now (Version 0.1), the animations are fixed. In future versions I will make it possible to modify the duration of the animation, which animations to do, when to animate, etc. \n</p>\n\n<p>\n<a href=\"https://github.com/KyleBanks/AnimatedListView\">Get the source on GitHub!</a>\n</p>Previously I <a href=\"http://kylewbanks.com/blog/Implementing-Google-Plus-Style-ListView-Animations-on-Android\">wrote about</a> how to animate views into place using a <b>ListView</b> on Android, similar to how Google does it in their Google Plus app. I decided to publish an Android library that manages the animations for you, allowing you to easily integrate it into any project. \n</p>\n\n<h3 class=\"title\">Download and Setup</h3>\n<p>\nFirst off, download the <a href=\"https://github.com/KyleBanks/AnimatedListView\">AnimatedListView library from GitHub</a>, and add it to your project as a Library. If you are unsure of how to do this, do a quick Google search based on your IDE and you will find tutorials covering the subject. Alternatively, you could just copy the source packages (<b>com.kylewbanks.animlv.*</b>) into your project, as there are no resources required by this library.\n</p>\n\n<p>\nOnce you have the Library set up, you can define an <b>AnimatedListView</b> in your layout XML like so: \n</p>\n\n<pre class=\"prettyprint\">\n&lt;com.kylewbanks.animlv.AnimatedListView\n    android:id=\"@+id/my_list\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" /&gt;\n</pre>\n\n<p>\nAnd reference it from Java like any other XML layout:\n</p>\n\n<pre class=\"prettyprint\">\nAnimatedListView animatedListView = (AnimatedListView) findViewById(R.id.my_list);\n</pre>\n\n<h3>Using the AnimatedListView</h3>\n<p>\nWith a reference to the <b>AnimatedListView</b>, we can now supply it with data to present using an <b>AnimatedListViewAdapter</b>. Here is an example with a list of <b>Post</b> objects:\n</p>\n\n<pre class=\"prettyprint\">\n//Resource ID of the View for each item in your ListView\nprivate int viewResourceId = R.layout.post_list_item;\n\n//Display data in the AnimatedListView\nprivate void displayListView(List&lt;Post&gt; postList) {\n    //Create an AnimatedListViewAdapter that will manage the data and animations\n    AnimatedListViewAdapter postListAdapter = new AnimatedListViewAdapter(getContext(), viewResourceId, postList, objectMapper);\n\n    //Tell the AnimatedListView to use the adapter\n    animatedListView.setAdapter(postListAdapter);\n}\n\n// Called to populate a View with the data of 'object'\nprivate AnimatedListViewObjectMapper objectMapper = new AnimatedListViewObjectMapper() {\n    @Override\n    public void bindObjectToView(Object object, View view) {\n        Post post = (Post) object;\n        //Populate and stylize the view however you want...\n    }\n};\n</pre>\n\n<p>\nAs you can see it works very similarly to a normal <b>ArrayAdapter</b> with one difference being that you supply an <b>AnimatedListViewObjectMapper</b> object that will be called with each item in your list, and a <b>View</b> to populate. For example, you could set the view to display the title of the <b>Post</b> object, or color it based on if the user has read the post, etc.\n</p>\n\n<p>\nFor now (Version 0.1), the animations are fixed. In future versions I will make it possible to modify the duration of the animation, which animations to do, when to animate, etc. \n</p>\n\n<p>\n<a href=\"https://github.com/KyleBanks/AnimatedListView\">Get the source on GitHub!</a>\n</p>Previously I <a href=\"http://kylewbanks.com/blog/Implementing-Google-Plus-Style-ListView-Animations-on-Android\">wrote about</a> how to animate views into place using a <b>ListView</b> on Android, similar to how Google does it in their Google Plus app. I decided to publish an Android library that manages the animations for you, allowing you to easily integrate it into any project. \n</p>\n\n<h3 class=\"title\">Download and Setup</h3>\n<p>\nFirst off, download the <a href=\"https://github.com/KyleBanks/AnimatedListView\">AnimatedListView library from GitHub</a>, and add it to your project as a Library. If you are unsure of how to do this, do a quick Google search based on your IDE and you will find tutorials covering the subject. Alternatively, you could just copy the source packages (<b>com.kylewbanks.animlv.*</b>) into your project, as there are no resources required by this library.\n</p>\n\n<p>\nOnce you have the Library set up, you can define an <b>AnimatedListView</b> in your layout XML like so: \n</p>\n\n<pre class=\"prettyprint\">\n&lt;com.kylewbanks.animlv.AnimatedListView\n    android:id=\"@+id/my_list\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" /&gt;\n</pre>\n\n<p>\nAnd reference it from Java like any other XML layout:\n</p>\n\n<pre class=\"prettyprint\">\nAnimatedListView animatedListView = (AnimatedListView) findViewById(R.id.my_list);\n</pre>\n\n<h3>Using the AnimatedListView</h3>\n<p>\nWith a reference to the <b>AnimatedListView</b>, we can now supply it with data to present using an <b>AnimatedListViewAdapter</b>. Here is an example with a list of <b>Post</b> objects:\n</p>\n\n<pre class=\"prettyprint\">\n//Resource ID of the View for each item in your ListView\nprivate int viewResourceId = R.layout.post_list_item;\n\n//Display data in the AnimatedListView\nprivate void displayListView(List&lt;Post&gt; postList) {\n    //Create an AnimatedListViewAdapter that will manage the data and animations\n    AnimatedListViewAdapter postListAdapter = new AnimatedListViewAdapter(getContext(), viewResourceId, postList, objectMapper);\n\n    //Tell the AnimatedListView to use the adapter\n    animatedListView.setAdapter(postListAdapter);\n}\n\n// Called to populate a View with the data of 'object'\nprivate AnimatedListViewObjectMapper objectMapper = new AnimatedListViewObjectMapper() {\n    @Override\n    public void bindObjectToView(Object object, View view) {\n        Post post = (Post) object;\n        //Populate and stylize the view however you want...\n    }\n};\n</pre>\n\n<p>\nAs you can see it works very similarly to a normal <b>ArrayAdapter</b> with one difference being that you supply an <b>AnimatedListViewObjectMapper</b> object that will be called with each item in your list, and a <b>View</b> to populate. For example, you could set the view to display the title of the <b>Post</b> object, or color it based on if the user has read the post, etc.\n</p>\n\n<p>\nFor now (Version 0.1), the animations are fixed. In future versions I will make it possible to modify the duration of the animation, which animations to do, when to animate, etc. \n</p>\n\n<p>\n<a href=\"https://github.com/KyleBanks/AnimatedListView\">Get the source on GitHub!</a>\n</p>","date":"10/12/2013 00:01 AM","preview":"Previously I wrote about how to animate views into place using a ListView on Android, similar to how Google does it in their Google Plus app. I decided to publish an Android library that manages the animations for you, allowing you to easily integrate it into any project. ","title":"Open Sourced: AnimatedListView Android Library","url":"http://kylewbanks.com/blog/Open-Sourced-AnimatedListView-Android-Library","author":"Kyle Banks","id":37,"tags":[]},{"body":"<p>\r\nI've just published my iOS and Mac OS library for asynchronous image downloading, aptly named <a href=\"http://kylewbanks.com/blog/iOS-Async-Image-Downloader\">AsyncImageDownloader</a>, to <a href=\"http://cocoapods.org/\">CocoaPods</a>. \r\n</p>\r\n\r\n<p>\r\nWith <b>CocoaPods</b> installed, setting up your project with the library is easy. Create a file called '<b>Podfile</b>' in the root of your project, and enter the following contents depending on which platform you're developing for:\r\n</p>\r\n\r\n<pre>\r\n# For iOS\r\nplatform :ios, '5.0' # 5.0 and up is supported\r\npod 'AsyncImageDownloader', '~> 1.0.0'\r\n\r\n# For Mac OS\r\nplatform :osx\r\npod 'AsyncImageDownloaderOSX', '~> 1.0.0'\r\n</pre>\r\n\r\n<p>\r\nWith that done, run <b>pod install</b> from the root of your project, and then simply import <b>AsyncImageDownloader</b>:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n#import &lt;AsyncImageDownloader.h&gt;\r\n</pre>\r\n\r\n<p>\r\nIf you run into any trouble, check out <a href=\"http://cocoapods.org/\">CocoaPods.org</a>, and for a tutorial on how to use <b>AsyncImageDownloader</b>, check out <a href=\"http://kylewbanks.com/blog/iOS-Async-Image-Downloader\">this post</a>.\r\n</p>","date":"10/14/2013 00:01 AM","preview":"I've just published my iOS and Mac OS library for asynchronous image downloading, aptly named AsyncImageDownloader, to CocoaPods. ","title":"AsyncImageDownloader Published to CocoaPods","url":"http://kylewbanks.com/blog/AsyncImageDownloader-Published-to-CocoaPods","author":"Kyle Banks","id":38,"tags":[]},{"body":"<p>\nA lot of times when using a REST API, it is effective to map integers from your JSON to an enum in your Java models. With Google's <a href=\"https://code.google.com/p/google-gson/\">GSON</a> library, the process of doing this is can be a little tricky, but I find it well worth the added effort to do so. \n</p>\n\n<p>\nIf you are not familiar with GSON, it is a very powerful JSON deserialization library that seamlessly transforms JSON objects (or arrays) to Java objects. The only data type I ever seem to find it lacking in is enums. The reason is fairly obvious, as enums don't exactly have an integer value, so GSON has no idea how to perform the mapping. It is also worth noting that while I will be showing an integer to enum mapping, this will also work with Strings, floats, etc.\n</p>\n\n<p>\nLet's take a look at a simple enum, and how we can map it to an integer value.\n</p>\n\n<pre class=\"prettyprint\">\npublic enum TicketType {\n     REGULAR, VIP, ALL_ACCESS\n}\n</pre>\n\n<p>\nThis simple enum describes ticket types, and has three distinct values. Now, our REST API returns these values as integers, so we will need to give them the appropriate values based on what the API specifies. \n</p>\n\n<pre class=\"prettyprint\">\npublic enum TicketType {\n     REGULAR(1), VIP(2), ALL_ACCESS(3);\n     \n     private final int key;\n     \n     TicketType(int key) {\n          this.key = key;\n     }\n\n     public int getKey() {\n          return this.key;\n     }     \n}\n</pre>\n\n<p>\nNow each <b>TicketType</b> value will be instantiated with the integer <b>key</b> that we can use to determine their JSON value. Easy enough so far, but how do we actually map this with GSON? We need one more method on the enum to return the instance of the enum with the appropriate value.\n</p>\n\n<pre class=\"prettyprint\">\npublic enum TicketType {\n     REGULAR(1), VIP(2), ALL_ACCESS(3);\n     \n     private final int key;\n     \n     TicketType(int key) {\n          this.key = key;\n     }\n\n     public int getKey() {\n          return this.key;\n     }     \n\n     public static TicketType fromKey(int key) {\n          for(TicketType type : TicketType.values()) {\n               if(type.getKey() == key) {\n                    return type;\n               }\n          }\n          return null;\n     }\n\n}\n</pre>\n\n<p>\nThis new method will return the appropriate <b>TicketType</b> for the key passed, or null if the key was invalid. Now we <i>almost</i> have enough functionality to instruct GSON on how to use this enum. Unfortunately, we need an intermediate class that can take the integer, and deserialize it into an enum. \n</p>\n\n<pre class=\"prettyprint\">\npackage com.example;\n\nimport java.lang.reflect.Type;\nimport com.google.gson.JsonDeserializationContext;\nimport com.google.gson.JsonDeserializer;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParseException;\nimport com.example.TicketType;\n\npublic class TicketTypeDeserializer implements JsonDeserializer&lt;TicketType&gt; {\n\n\t@Override\n\tpublic TicketType deserialize(JsonElement element, Type arg1, JsonDeserializationContext arg2) throws JsonParseException {\n\t\tint key = element.getAsInt();\n\t\treturn TicketType.fromKey(key);\n\t}\n\n}\n</pre>\n\n<p>\nThis class is very simple, and essentially just makes use of the static <b>fromKey(int key);</b> method by reading an integer from the appropriate JSON element, and passing it along. Now we are finally ready to instruct GSON of this mapping.\n</p>\n\n<pre class=\"prettyprint\">\nGsonBuilder gsonBuilder = new GsonBuilder();\ngsonBuilder.registerTypeAdapter(TicketType.class, new TicketTypeDeserializer());\nGson gson = gsonBuilder.create();\n</pre>\n\n<p>\nYou can now proceed to use GSON as usual, and it will understand how to map the appropriate integers to our <b>TicketType</b> enum.\n</p>","date":"3/1/2013 00:01 AM","preview":"\nA lot of times when using a REST API, it is effective to map integers from your JSON to an enum in your Java models. With Google's <a href=\"https://code.google.com/p/google-gson/\">GSON</a> library, the process of doing this is can be a little tricky, but I find it well worth the added effort to do so. \n","title":"Integer to Enum Mapping with Google's GSON","url":"http://kylewbanks.com/blog/Int-Enum-Mapping-with-GSON","author":"Kyle Banks","id":39,"tags":[]},{"body":"<p>\nUnfortunately, Android does not support viewing PDFs out of the box in a <b>WebView</b>. Luckily, Google has a nifty little tool that allows you to perform this very task quite easily using <b>Google Docs</b>. Basically we will embed our PDF in a Google Doc page on-the-fly and load that. Here's the code: \n</p>\n\n<pre class=\"prettyprint\">\nString myPdfUrl = \"http://example.com/awesome.pdf\";\nString url = \"http://docs.google.com/gview?embedded=true&url=\" + myPdfUrl;\nLog.i(TAG, \"Opening PDF: \" + url);\nwebView.getSettings().setJavaScriptEnabled(true); \nwebView.loadUrl(url);\n</pre>\n\n<p>\nSimply replace the <b>myPdfUrl</b> value with your own remote PDF, and you're done.","date":"3/6/2013 00:01 AM","preview":"\nUnfortunately, Android does not support viewing PDFs out of the box in a <b>WebView</b>. Luckily, Google has a nifty little tool that allows you to perform this very task quite easily using <b>Google Docs</b>. Basically we will embed our PDF in a Google Doc page on-the-fly and load that. Here's the code: \n","title":"How To Load a PDF in an Android WebView","url":"http://kylewbanks.com/blog/Loading-PDF-in-Android-WebView","author":"Kyle Banks","id":40,"tags":[]},{"body":"<p>\nOne of my favourite features of Grails is the ability to render just about any object as JSON. This makes the creation of REST API calls a breeze, but one problem with the default implementation is that it renders the <b>entire</b> object as JSON. This isn't always an issue, but if for example you are rendering a <b>User</b> object, you (hopefully) don't want to output the user's password. You may also wish to limit the size of the JSON, by removing output that is simply not necessary.\n</p>\n\n<p>\nLucky for us, Grails allows deep customization in how your JSON is written.\n</p>\n\n<p>\nLet's look at a simple domain object, <b>Review</b> which describes just that. A user reviewing another user.\n</p>\n\n<pre class=\"prettyprint\">\nclass Review {\n    static belongsTo = [reviewer: User, reviewedUser: User]\n\n    String reviewContent\n    Integer reviewRating\n    Date dateCreated\n}\n</pre>\n\n<p>\nSo what do we want the JSON to look like? Well, I'd like to see the <b>id</b> of the <b>Review</b>, the content and rating, as well as the date created. In addition, our API clients may want to show the name of the reviewer and reviewed user. If they want to show more information about either of these two users, they will need the <b>id</b> of each in order to retrieve more, so we will return that as well. \n</p>\n\n<p>\nThe process is very simple. We register our <b>Review</b> class with the JSON object marshaller. When we do this, we construct a <b>Map</b> containing all of the data we want to return. (I normally register all of the neccessary classes in <b>BootStrap.groovy</b> but you can basically put it anywhere, so long as it's registered before you call <b>render as JSON</b>.)\n</p>\n\n<pre class=\"prettyprint\">\n//Register Review domain for JSON rendering\nJSON.registerObjectMarshaller(Review) {\n    def output = [:]\n    output['id'] = it.id\n    output['reviewContent'] = it.reviewContent\n    output['reviewRating'] = it.reviewRating\n    output['dateCreated'] = dateFormatter.format(it.dateCreated)\n    output['reviewer'] = [\"id\": it.reviewer.id, \"name\": it.reviewer.getFullName()]\n    output['reviewedUser'] = [\"id\": it.reviewedUser.id, \"name\": it.reviewedUser.getFullName()]\n\n    return output;\n}\n</pre>\n\n<p>\nWithin the <b>JSON.registerObjectMarshaller(Object o) { }</b> closure, <b>it</b> refers to the instance of the object whose class is being registered. So, in the previous example, <b>it</b> is an instance of <b>Review</b>. \n</p>\n\n<p>\nNow that the <b>Review</b> class has been registered, we are all setup to output any instance of <b>Review</b> as JSON.\n</p>\n\n<pre class=\"prettyprint\">\n//A single review\nReview review = Review.findById(id);\nrender review as JSON\n\n//A list of reviews\ndef reviews = Review.findAllByReviewer(reviewingUser)\nrender reviews as JSON\n\n//An object containing reviews\nUser user = User.findById(id); //User hasMany reviews\nrender user as JSON\n</pre>\n\n<p>\nAs you can see above, any other objects that you render as JSON which contain <b>Review</b> objects will also have their reviews rendered as we designed.\n</p>\n\n<p>\nThe JSON class in Grails is extremely powerful out of the box, but with this added customization it becomes the API developer's best friend.\n</p>","date":"3/6/2013 00:01 AM","preview":"\nOne of my favourite features of Grails is the ability to render just about any object as JSON. This makes the creation of REST API calls a breeze, but one problem with the default implementation is that it renders the <b>entire</b> object as JSON. This isn't always an issue, but if for example you are rendering a <b>User</b> object, you (hopefully) don't want to output the user's password. You may also wish to limit the size of the JSON, by removing output that is simply not necessary.\n","title":"Customizing JSON Output in Grails with JSON Object Marshaller","url":"http://kylewbanks.com/blog/Customizing-JSON-Grails-Object-Marshalling","author":"Kyle Banks","id":41,"tags":[]},{"body":"<p>\r\nThis tutorial will cover how to fetch and parse JSON from a remote server on Android. We will use GSON, a JSON parsing library developed by Google, to quickly parse the JSON into Java objects with very minimal work required.\r\n</p>\r\n\r\n<p>Before we begin, head over <a href=\"/rest/posts.json\">here</a> to take a look at the JSON we will be working with. This JSON was designed using the <a href=\"/blog/Customizing-JSON-Grails-Object-Marshalling\">Grails JSON object marshaller explained in a previous post</a>.</p>\r\n\r\n<h4>Project Setup: </h4>\r\n\r\n<ol>\r\n<li>Create a new Android project. You can target as low as Android 1.5 (or as high as you wish) with the code we will be using. Make sure you select <b>Create an Activity</b> in the project creation wizard, and name it <b>PostsActivity</b></li>\r\n<li>Add the Internet permission to your AndroidManifest.xml</li>\r\n<pre class=\"prettyprint\">&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;</pre>\r\n<li><a href=\"https://code.google.com/p/google-gson/\" target=\"_BLANK\">Download the latest version of GSON</a>, and add it to your project by copying the jar file to the project's <b>libs</b> directory. If you do not see the jar file in your libs directory within Eclipse, right click and select <b>Refresh</b></i>\r\n<li>Create two classes, Post and Tag. These will be our entity classes that model the data retrieved by the REST calls. (For the sake of brevity, I have made all of their properties public, rather than write out all of the accessor and mutator methods.) You will notice that some fields have the <b>@SerializedName(\"\")</b> annotation. This denotes that the property name does not match the field name in our JSON. If both names do match, there is no need for the annotation.</li>\r\n</ol>\r\n\r\n<pre class=\"prettyprint\">\r\n//Post.java\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\npublic class Post {\r\n\r\n\t@SerializedName(\"id\")\r\n\tpublic long ID;\r\n\tpublic String title;\r\n\tpublic String author;\r\n\tpublic String url;\r\n\t@SerializedName(\"date\")\r\n\tpublic Date dateCreated;\r\n\tpublic String body;\r\n\t\r\n\tpublic List<Tag> tags;\r\n\t\r\n\tpublic Post() {\r\n\t\t\r\n\t}\r\n}\r\n\r\n//Tag.java\r\npublic class Tag {\r\n\t\r\n\tpublic String name;\r\n\tpublic String url;\r\n\r\n\tpublic Tag() {\r\n\t\t\r\n\t}\r\n}\r\n</pre>\r\n\r\n<p>\r\nNow that the project has been setup, we are ready to start parsing some JSON. The first step is to write a simple asynchronous method that will fetch the JSON from the remote server without blocking the main thread. (This is very important for the <a href=\"/blog/iOS-Async-Image-Downloader\">same reasons discussed here</a>.)\r\n</p>\r\n\r\n<p>\r\nLet's add a private class to our activity called <b>PostFetcher</b>, which will asynchronously (you guessed it) fetch posts, and inform <b>PostsActivity</b> when posts have been loaded, or there has been an error. For now, our activity will simple show a <b>Toast</b> message for each post returned, or if there is an error.\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npackage com.example.kylewbanksblog;\r\n\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.Reader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport org.apache.http.HttpEntity;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.StatusLine;\r\nimport org.apache.http.client.HttpClient;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.impl.client.DefaultHttpClient;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.app.Activity;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.widget.Toast;\r\n\r\npublic class PostsActivity extends Activity {\r\n\t\r\n\tprivate static final String TAG = \"PostsActivity\";\r\n\tprivate List&lt;Post&gt; posts;\r\n\r\n\t@Override\r\n\tprotected void onCreate(Bundle savedInstanceState) {\r\n\t\tsuper.onCreate(savedInstanceState);\r\n\t\tsetContentView(R.layout.activity_posts);\r\n\t\t\r\n\t\tPostFetcher fetcher = new PostFetcher();\r\n\t\tfetcher.execute();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\r\n\t\t// Inflate the menu; this adds items to the action bar if it is present.\r\n\t\tgetMenuInflater().inflate(R.menu.posts, menu);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tprivate void handlePostsList(List&lt;Post&gt; posts) {\r\n\t\tthis.posts = posts;\r\n\r\n\t\trunOnUiThread(new Runnable() {\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\tfor(Post post : PostsActivity.this.posts) {\r\n\t\t\t\t\tToast.makeText(PostsActivity.this, post.title, Toast.LENGTH_SHORT).show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\tprivate void failedLoadingPosts() {\r\n\t\trunOnUiThread(new Runnable() {\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\tToast.makeText(PostsActivity.this, \"Failed to load Posts. Have a look at LogCat.\", Toast.LENGTH_SHORT).show();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t\r\n\tprivate class PostFetcher extends AsyncTask&lt;Void, Void, String&gt; {\r\n\t\tprivate static final String TAG = \"PostFetcher\";\r\n\t\tpublic static final String SERVER_URL = \"http://kylewbanks.com/rest/posts.json\";\r\n\t\t\r\n\t\t@Override\r\n\t\tprotected String doInBackground(Void... params) {\r\n\t\t\ttry {\r\n\t\t\t\t//Create an HTTP client\r\n\t\t\t\tHttpClient client = new DefaultHttpClient();\r\n\t\t\t\tHttpPost post = new HttpPost(SERVER_URL);\r\n\t\t\t\t\r\n\t\t\t\t//Perform the request and check the status code\r\n\t\t\t\tHttpResponse response = client.execute(post);\r\n\t\t\t\tStatusLine statusLine = response.getStatusLine();\r\n\t\t\t\tif(statusLine.getStatusCode() == 200) {\r\n\t\t\t\t\tHttpEntity entity = response.getEntity();\r\n\t\t\t\t\tInputStream content = entity.getContent();\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t//Read the server response and attempt to parse it as JSON\r\n\t\t\t\t\t\tReader reader = new InputStreamReader(content);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tGsonBuilder gsonBuilder = new GsonBuilder();\r\n                                                gsonBuilder.setDateFormat(\"M/d/yy hh:mm a\");\r\n\t\t\t\t\t\tGson gson = gsonBuilder.create();\r\n\t\t\t\t\t\tList&lt;Post&gt; posts = new ArrayList&lt;Post&gt;();\r\n\t\t\t\t\t\tposts = Arrays.asList(gson.fromJson(reader, Post[].class));\r\n\t\t\t\t\t\tcontent.close();\r\n\r\n\t\t\t\t\t\thandlePostsList(posts);\r\n\t\t\t\t\t} catch (Exception ex) {\r\n\t\t\t\t\t\tLog.e(TAG, \"Failed to parse JSON due to: \" + ex);\r\n\t\t\t\t\t\tfailedLoadingPosts();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tLog.e(TAG, \"Server responded with status code: \" + statusLine.getStatusCode());\r\n\t\t\t\t\tfailedLoadingPosts();\r\n\t\t\t\t}\r\n\t\t\t} catch(Exception ex) {\r\n\t\t\t\tLog.e(TAG, \"Failed to send HTTP POST request due to: \" + ex);\r\n\t\t\t\tfailedLoadingPosts();\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t} \r\n\t}\r\n}\r\n</pre>\r\n\r\n<p>\r\nA few things to note from the <b>PostFetcher</b> class. The first is that we need to define how date's will be parsed if we want the <b>Post</b> class to get the proper date object. We could just have <b>Post</b> keep hold of a string, but a <b>Date</b> is much better as we can perform calculations on it, and display it in the app user's timezone. The second important thing to note is that we need to tell <b>GSON</b> what kind of class we are expecting to get back (in this case and array of posts).\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\nGsonBuilder gsonBuilder = new GsonBuilder();\r\ngsonBuilder.setDateFormat(\"M/d/yy hh:mm a\"); //Format of our JSON dates\r\nGson gson = gsonBuilder.create();\r\nList&lt;Post&gt; posts = new ArrayList&lt;Post&gt;();\r\n//Instruct GSON to parse as a Post array (which we convert into a list)\r\nposts = Arrays.asList(gson.fromJson(reader, Post[].class));\r\n</pre>\r\n\r\n\r\n<p>\r\nHopefully this gives you an idea of just how powerful GSON is, and how quickly you can get data flowing to your apps. Now that you have the Post and Tag instances loaded on your device, you can use them just like any other object. Show them in a <b>ListView</b> or link to their specific web pages using the post's <b>url</b> property. \r\n</p>\r\n\r\n\r\n<p>\r\nCombine this quick JSON parsing with the efficient <a href=\"/blog/Grails-JSON-Object-Marshalling\">JSON creation of Grails</a>, and you can start building fully functional application prototypes in as little as a few hours that actually communicate with each other.\r\n</p>\r\n\r\n\r\n<p>\r\nFeel free to clone the full source on <a href=\"https://github.com/KyleBanks/GSONAndroidSample\">GitHub</a>.\r\n</p>\r\n\r\n\r\n<h3 class=\"title\">Update - Implementing a Client Side SQLite Database for Cacheing</h3>\r\n<p>\r\nI've decided to go a step further and show how you can actually cache this data in a client-side <b>SQLite</b> database to reduce network traffic and improve load times in your app. Check out <a href=\"http://kylewbanks.com/blog/Tutorial-Implementing-a-Client-Side-Cache-using-the-SQLite-Database-on-Android-and-SQLiteOpenHelper\">this post</a> for more details!\r\n</p>","date":"10/11/2013 00:01 AM","preview":"This tutorial will cover how to fetch and parse JSON from a remote server on Android. We will use GSON, a JSON parsing library developed by Google, to quickly parse the JSON into Java objects with very minimal work required.","title":"Tutorial: Using GSON to Fetch and Parse JSON into Java Models for Android","url":"http://kylewbanks.com/blog/Tutorial-Android-Parsing-JSON-with-GSON","author":"Kyle Banks","id":42,"tags":[]},{"body":"<p>\nI'm a firm believer that every developer, like a carpenter or artist, should constantly be trying to improve their toolkit. These tools should help you accomplish your goals in a way that works for you. Just like a single paintbrush doesn't suit every artist, not all tools will suit every developer. \n</p>\n\n<p>\nIn an effort to keep tabs on the tools that I use, I thought I would document a list of the tools I use for development, and share why I use them.\n</p>\n\n<h4>Java, Groovy, and Grails</h4>\n<p>\n<a href=\"http://www.jetbrains.com/idea/\">IntelliJ IDEA</a> - While there is a free version of IntelliJ, I'm lucky enough to have a license for the full IDE thanks to my company, and have come to use it very extensively. IntelliJ is the only IDE I have found that actually has good support for Grails, so I use it just about every day. I'm still using version 11, but excited to try out the newly released version 12 shortly.\n</p>\n\n<p>\n<a href=\"http://grails.org/plugin/console\">Grails Console Plugin</a> - The console plugin for Grails allows you to navigate to <b>/console</b> on your website and execute Groovy/Java code in your browser. The plugin gives you access to all of your domains, GORM, and just about anything you could want, so you can quickly test out functionality as you write it by executing it in the console, and ensuring the concept works before fully implementing it and putting it into a controller or service. Obviously this is a big security risk, so make sure you disable the plugin before going to production.\n</p>\n\n<p>\n<a href=\"https://code.google.com/p/google-gson/\">GSON</a> - GSON is the most powerful JSON parsing and entity mapping tool I have ever used. I've written about the power of GSON a few times before so I won't repeat it here, but if you want a quick example of how to use GSON with Android, check out <a href=\"/blog/Tutorial-Android-Parsing-JSON-with-GSON\">this post</a>.\n</p>\n\n<h4>Android</h4>\n<p>\n<a href=\"http://www.eclipse.org/\">Eclipse</a> - While I truly can't stand using Eclipse for anything else, it is the only IDE officially supported by Google for Android development. Obviously you can use any editor you like, but I'd personally like to stay on the beaten path. I have too many bad memories of trying to get the old (2.0) Android SDK setup to want to bother going about it my own way. \n</p>\n<p>\n<a href=\"http://android-holo-colors.com/\">Android Holo Colors Generator</a> - This tool is a very simple website that allows you to customize the colors of all Android UI components. It generates all the required assets including images and stylesheets that you can easily plug into your project and be on your way. It's not that there is any real difficulty in modifying the colors yourself, but this tool takes all the time and effort out of it so it's nice to have the link handy.\n</p>\n\n<h4>Objective-C</h4>\n<p>\n<a href=\"https://developer.apple.com/xcode/\">Xcode</a> - Really a no-brainer here. Xcode is hands down the best Objective-C IDE out there. With fantastic autocompletion and syntax highlighting, various common project templates to get you started, and easy-to-learn hotkeys, there is no reason to use anything else. Xcode also has great support for C and C++.\n</p>\n\n<p>\n<a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a> - I previously wrote about a tool I developed for <a href=\"/blog/iOS-Async-Image-Downloader\">asynchronously downloading images in iOS</a>. I normally only use that tool while quickly prototyping functionality, and once my application is ready for performance tuning, I turn to SDWebImage to take over the image downloading. This library handles everything you could want including memory and disk caching, asynchronous downloading, image compression, and more. The library is written as a category for <b>UIImageView</b> so it is extremely easy to plug in and start using.\n</p>\n\n<h4>CSS and JavaScript</h4>\n<p>\n<a href=\"http://incident57.com/codekit/\">CodeKit</a> - True to it's word, CodeKit really is <b>like steroids for web developers</b>. CodeKit allows you to develop your CSS and JavaScript while having it injected into the web page you are working on, without a browser refresh. Every time you save, your scripts and styles are auto-refreshed in the browser, without effort. It is fantastic. In addition to the auto injection, CodeKit offers a plethora of features like framework and project management, compilation of Less and Sass files (among others), image optimization, and more. I think it is well worth the $25 to buy, but there is also a free trial if you want to check it out.\n</p>\n\n<h4>Python/Django</h4>\n<p>\n<a href=\"http://docs.python.org/2/library/idle.html\">IDLE</a> - IDLE is a very minimal IDE built with Python, for Python. The reason I love IDLE is the interactive console, which allows you to mess around with Python on-the-fly, without necessarily having to create a project, or any files at all for that matter (similar to the Grails Console plugin mentioned above). This makes it great for visually confirming that a concept will work, prior to fully implementing it into your project.\n</p>\n<p>\n<a href=\"http://www.sublimetext.com/\">Sublime Text 2</a> - I'm still looking for a full featured Python IDE that has decent support for Django, but have been using Sublime Text 2 in the meantime. I know a lot of people rave about Sublime, but personally I haven't found it to live up to the hype. It is powerful, to be sure, but I have never been able to get fully comfortable in it.\n</p>\n\n<h4>SQL/Database Management</h4>\n<p>\n<a href=\"http://www.navicat.com/\">Navicat</a> - I've recently moved away from <a href=\"http://www.mysql.com/products/workbench/\">MySQL Workbench</a> in favor of Navicat for my database management needs. I find Navicat does a great job at managing multiple database connections and has great support for PostgreSQL and MySQL, the two database vendors I most commonly use. \n</p>\n\n<h4>Source Control</h4>\n<p>\n<a href=\"http://git-scm.com/\">Git</a> (Command Line) + <a href=\"https://github.com/\">GitHub</a> - Perhaps it's because I used Git before SVN, but I have always found Git to be so intuitive, fast, and efficient, that I can never get comfortable using SVN when I have to. I can use it, but I'd always rather be working with Git. Git has become so ingrained in my workflow, that I very commonly finding myself committing changes locally without even thinking about it. Once I push to GitHub, I have a very readable commit history for every ticket I work on, thanks to all of the local commits. That's something I have never been able to reproduce with SVN, I'm much too accustomed to locally committing everything and pushing once I'm comfortable (or ending the day).\n</p>\n\n<h4>General</h4>\n<p>\n<a href=\"http://en.wikipedia.org/wiki/Vi\">Vi</a> - I get why everybody hates on Vi, and I will admit that I had a tough time with it when I was first learning the shell. The commands are far from intuitive, the key-combinations are entirely abnormal, and it's not the prettiest thing to look at. With that being said, once I was able to get used to the key strokes, it has become my favourite tool for writing shell scripts, quickly editing HTML, and for modifying config files. I can honestly say I have probably spent more time in Vi than any other single editor that I use.\n</p>\n\n\n<br />\n<p>\nI will try to keep this list up to date as my habits change, and as I remember the many tools I've certainly forgotten to mention, but that just about wraps it up for now. What's in your toolkit?\n</p>\n","date":"3/14/2013 00:01 AM","preview":"\nI'm a firm believer that every developer, like a carpenter or artist, should constantly be trying to improve their toolkit. These tools should help you accomplish your goals in a way that works for you. Just like a single paintbrush doesn't suit every artist, not all tools will suit every developer. \n","title":"My Development Toolkit","url":"http://kylewbanks.com/blog/My-Development-Toolkit","author":"Kyle Banks","id":46,"tags":[]},{"body":"<p>\nHaving the same content available at <b>www.yourdomain.com</b> and <b>yourdomain.com</b> is bad for SEO, because it counts as duplicate content. Not allowing users to go to <b>www</b> or root is even worse, as most users will simply assume the website is broken, or nonexistent. The solution is to redirect from one to the other, allowing users to go to whichever they prefer, and removing the issue of duplicate content. I prefer to redirect from <b>www</b> to the root domain because I find the URL to be cleaner this way, but it's entirely up to you.\n</p>\n\n<p>\nIn order to achieve this in Grails, we simply need to add a file to <b>grails-app/conf</b> called <b>DomainFilters.groovy</b> (any groovy file ending with 'Filters' in the <b>conf</b> directory will produce the same results).\n</p>\n\n<pre class=\"prettyprint\">\nclass DomainFilters {\n    def filters = {\n        wwwCheck(uri:'/**') {\n            before = {\n                if (request.getServerName().toLowerCase().startsWith(\"www.\")) {\n                    int port = request.getServerPort();\n\n                    if (request.getScheme().equalsIgnoreCase(\"http\") && port == 80) {\n                        port = -1;\n                    }\n\n                    URL redirectURL = new URL(request.getScheme(), request.getServerName().replaceFirst(\"www.\",\"\"), port, request.forwardURI);\n\n                    response.setStatus(301)\n                    response.setHeader(\"Location\", redirectURL.toString())\n                    response.flushBuffer()\n                }\n            }\n        }\n    }\n}\n</pre>\n\n<p>\nThe <b>wwwCheck</b> filter checks all requests for the <b>www.</b> prefix, and if found, redirects to the same URL, without the <b>www.</b> subdomain. It is important to return the 301 response because it informs the browser (and search engine crawlers) that this is a permanent redirect. There will never be content specific to <b>www.</b>.\n</p>\n\n<p>\nIf your server listens for <b>https</b> requests (or any requests on ports other than 80), you can add checks using the same format, replacing <b>http</b> and port 80 with the appropriate values. You can also redirect from any subdomain you want to the root site (or another subdomain), by simply swapping <b>www</b> with your subdomain. \n</p>\n\n<p>\nIf you want to see this in action, try to visit <a href=\"http://www.kylewbanks.com\">http://www.kylewbanks.com</a>. Notice that you are seamlessly redirected to <b>http://kylewbanks.com</b>.\n</p>","date":"3/14/2013 00:01 AM","preview":"\nHaving the same content available at <b>www.yourdomain.com</b> and <b>yourdomain.com</b> is bad for SEO, because it counts as duplicate content. Not allowing users to go to <b>www</b> or root is even worse, as most users will simply assume the website is broken, or nonexistent. The solution is to redirect from one to the other, allowing users to go to whichever they prefer, and removing the issue of duplicate content. I prefer to redirect from <b>www</b> to the root domain because I find the URL to be cleaner this way, but it's entirely up to you.\n","title":"Redirecting WWW to Root with Grails","url":"http://kylewbanks.com/blog/Redirecting-WWW-Root-Grails","author":"Kyle Banks","id":47,"tags":[]},{"body":"<p>\nWhen using resources in an Android application, it is usually sufficient to make use the of resource manager with functions such as <b>getString()</b> and <b>getDrawable()</b>. Occasionally however, you will need to get the actual URI of a resource.  \n</p>\n<p>\nThe process is very easy, as the URI has a very sensible setup:\n</p>\n<pre class=\"prettyprint\">\nandroid.resource://[package-name]/[Resource-ID]\n</pre>\n<p>\nAll you need to do is replace the package name with your app's package name, as defined in the manifest, and the resource ID of the resource you would like to use.\n</p>\n<pre class=\"prettyprint\">\nUri resourceURI = Uri.parse(\"android.resource://\" + this.getPackageName() + \"/\" + R.raw.my_resource);\n</pre>","date":"3/15/2013 00:01 AM","preview":"\nWhen using resources in an Android application, it is usually sufficient to make use the of resource manager with functions such as <b>getString()</b> and <b>getDrawable()</b>. Occasionally however, you will need to get the actual URI of a resource.  \n","title":"Creating a URI for an Android Resource","url":"http://kylewbanks.com/blog/Android-Resource-To-URI","author":"Kyle Banks","id":48,"tags":[]},{"body":"<p>\nWith all of the news about <a href=\"http://www.theverge.com/2013/3/13/4101144/google-shuts-down-reader-rss-aggregation-service\">Google shutting down Reader</a> on July 1st, there seems to be an uprising of new RSS feed readers cropping up to try and fill the void. \n</p>\n\n<p>\nAll of this got me thinking that I should make a quick RSS feed for my site, and came up with the following solution. It's a very simple solution, and should take no longer than a few minutes to set up. The most important parts are to ensure the <b>pubDate</b> format is correct, and to set the response content-type to <b>application/xml</b>.\n</p>\n\n<p>In your Controller:</p>\n<pre class=\"prettyprint\">\ndef rss = {\n    DateFormat pubDateFormatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss Z\", Locale.ENGLISH);\n    def postList = Post.list(max: 15)\n\n    response.setContentType(\"application/xml\")\n    [posts: postList, formatter: pubDateFormatter]\n}\n</pre>\n\n<p>\nAnd the corresponding view (rss.gsp):\n</p>\n<pre class=\"prettyprint\">\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;rss version=\"2.0\"&gt;\n    &lt;channel&gt;\n        &lt;title&gt;Kyle W. Banks&lt;/title&gt;\n        &lt;link&gt;http://kylewbanks.com/&lt;/link&gt;\n        &lt;description&gt;A collection of tips, tricks, and tutorials covering a wide range of programming topics.&lt;/description&gt;\n        &lt;image&gt;\n            &lt;url&gt;http://kylewbanks.com/static/images/favicon.ico&lt;/url&gt;\n            &lt;title&gt;Kyle W. Banks&lt;/title&gt;\n            &lt;link&gt;http://kylewbanks.com&lt;/link&gt;\n       &lt;/image&gt;\n        &lt;g:each in=\"${posts}\" var=\"post\"&gt;\n            &lt;item&gt;\n              &lt;title&gt;${post.title}&lt;/title&gt;\n              &lt;link&gt;http://kylewbanks.com/blog/${post.url}&lt;/link&gt;\n              &lt;pubDate&gt;${formatter.format(post.dateCreated)}&lt;/pubDate&gt;\n              &lt;description&gt;&lt;![CDATA[ ${post.body} ]]&gt;&lt;/description&gt;\n            &lt;/item&gt;\n        &lt;/g:each&gt;\n    &lt;/channel&gt;\n&lt;/rss&gt;\n</pre>\n\n<p>\nFinally, add the following link to your site's head to help your RSS feed be discovered by readers, and you're set:\n</p>\n<pre class=\"prettyprint\">\n&lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"Kyle W. Banks RSS Feed\" href=\"http://kylewbanks.com/rest/rss\" /&gt;\n</pre>\n\n<p>\nFor an example on how this should look, click <a href=\"/rest/rss\" target=\"_BLANK\">here</a>.\n</p>\n\n<p>\nI plan to add some tracking to this, and perhaps see if I can somehow get the events into Google Analytics. If I can get Google Analytics to track the server side events, I'll be sure to post back with an update on how I did it.\n</p>","date":"3/16/2013 00:01 AM","preview":"\nWith all of the news about <a href=\"http://www.theverge.com/2013/3/13/4101144/google-shuts-down-reader-rss-aggregation-service\">Google shutting down Reader</a> on July 1st, there seems to be an uprising of new RSS feed readers cropping up to try and fill the void. \n","title":"Creating a Simple RSS Feed for Your Grails Site","url":"http://kylewbanks.com/blog/Create-A-Simple-Grails-RSS-Feed","author":"Kyle Banks","id":49,"tags":[]},{"body":"<p>\nSomething that can be helpful in Android development is to know if your app is in the background, or if it is presently active. Determining this programmatically can be tricky, but it is by no means impossible. Using your <b>Application</b> object, you can register a listener for activity lifecycle changes, and keep track of your application's state.\n</p>\n\n<p>\nIn the following example I am only looking at the <b>ActivityStopped</b> and <b>ActivityStarted</b> events, but you should also be aware of <b>Paused</b>, <b>Resumed</b>, <b>Destroyed</b> and <b>Created</b> events, and account for them accordingly.\n</p>\n\n<p>\nBe aware, that while it is possible to keep a reference to the top (active) activity, it is by no means a good idea to do so. Keeping references to destroyed activities is bound to give you nothing but trouble, so it's best to refrain from doing it.\n</p>\n\n<pre class=\"prettyprint\">\nprivate int numRunningActivities = 0;\n\n@Override\npublic void onCreate() {\n\tsuper.onCreate();\n\tLog.i(TAG, \"Application started\");\n\t\n\t...\n\t\n\t//Listen for activity state changes\n\tthis.registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacks() {\n\t\t\n\t\t@Override\n\t\tpublic void onActivityStopped(Activity activity) {\n\t\t\tLog.i(TAG, \"Activity Stopped: \" + activity.getClass().getCanonicalName());\n\t\t\tnumRunningActivities--;\n\t\t\t\n\t\t\tif(numRunningActivities == 0) {\n\t\t\t\tLog.i(TAG, \"No running activities left, app has likely entered the background.\");\n\t\t\t} else {\n\t\t\t\tLog.i(TAG, numRunningActivities + \" activities remaining\");\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onActivityStarted(Activity activity) {\n\t\t\tLog.i(TAG, \"Activity Started: \" + activity.getClass().getCanonicalName());\n\t\t\tnumRunningActivities++;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onActivityResumed(Activity activity) {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onActivityPaused(Activity activity) {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onActivityDestroyed(Activity activity) {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n\t});\n}\n</pre>","date":"3/24/2013 00:01 AM","preview":"\nSomething that can be helpful in Android development is to know if your app is in the background, or if it is presently active. Determining this programmatically can be tricky, but it is by no means impossible. Using your <b>Application</b> object, you can register a listener for activity lifecycle changes, and keep track of your application's state.\n","title":"Keep Track of Running Activities in Android, and When Your App is in the Background","url":"http://kylewbanks.com/blog/Keep-Track-Of-Running-Android-Activities","author":"Kyle Banks","id":50,"tags":[]},{"body":"<p>\n<a href=\"http://grails.org/doc/latest/guide/GORM.html\">GORM</a> provides Grails developers with plenty of useful hooks, events, methods, and functionality, not the least of which is domain events that inform you when domain objects are being created, updated, and deleted (you can find documentation on these events <a href=\"http://grails.org/doc/latest/guide/GORM.html#eventsAutoTimestamping\">here</a>). Within these events, a common use-case is to determine if a particular domain property has changed, and to act accordingly. \n</p>\n\n<p>\nThe best place to check for dirty properties is usually in the <b>beforeUpdate</b> event. The <b>beforeInsert</b> and <b>afterUpdate</b> events may also seem like good choices at first, but they may not be depending on the use-case. Before inserting, all properties are dirty because they are new, so they haven't really changed they have just been created. After updating, none of the properties are dirty because the new values have already been persisted in your database. These events provide plenty of value if used correctly, but may not always be the best place to check for dirty domain properties.\n</p>\n\n<p>\nOne domain in particular that I always perform dirty property checks on is any <b>User</b> domains that my application requires. For instance, if a <b>User</b> object's password has changed, you may want to be alerted in the <b>beforeUpdate</b> event and encrypt the password before it is inserted into your database.\n</p>\n\n<pre class=\"prettyprint\">\nclass User {\n\n    String username\n    String password\n\n    ...\n\n    //Called any time the domain is updated\n    def beforeUpdate() {\n\n        def dirtyProperties = this.dirtyPropertyNames\n        if(dirtyProperties.contains(\"password\")) {\n\t\tpassword = password.encodeAsPassword()\n\t}\n\n        return true //Indicates that the update can proceed\n    }\n}\n</pre>\n\n<p>\nIn the case of a <b>User</b> domain, it is also appropriate to use the <b>beforeInsert</b> to perform password encryption.\n</p>\n\n<pre class=\"prettyprint\">\ndef beforeInsert() {\n    password = password.encodeAsPassword()\n}\n</pre>\n\n<p>\n<b>Note:</b> Be careful not to perform any saves on the domain within these events, as you will get a <b>StackOverflowException</b>. (The event calls <b>.save()</b>, restarting the whole event cycle, where <b>.save()</b> will be called again, and so on. This infinite loop will never end, and the exception will be raised.)\n</p>","date":"4/3/2013 00:01 AM","preview":"\n<a href=\"http://grails.org/doc/latest/guide/GORM.html\">GORM</a> provides Grails developers with plenty of useful hooks, events, methods, and functionality, not the least of which is domain events that inform you when domain objects are being created, updated, and deleted (you can find documentation on these events <a href=\"http://grails.org/doc/latest/guide/GORM.html#eventsAutoTimestamping\">here</a>). Within these events, a common use-case is to determine if a particular domain property has changed, and to act accordingly. \n","title":"Checking for Dirty (Updated) Properties on a Grails Domain","url":"http://kylewbanks.com/blog/Checking-For-Dirty-Properties-On-Grails-Domain","author":"Kyle Banks","id":51,"tags":[]},{"body":"<p>\nIt seems that ever since Grails 2.1 arrived, controller classes have not been auto-reloaded when edited in a development environment. I'm not sure if this is now the intended behaviour of controllers, but it sure can make for slower development and debugging. \n</p>\n\n<p>\nLuckily, you can make controllers auto-reload again with a simple VM argument when starting your Grails application:\n</p>\n\n<pre class=\"prettyprint\">\n-javaagent:${GRAILS_HOME}/lib/org.springsource.springloaded/springloaded-core/jars/springloaded-core-1.1.1.jar -Xverify:none\n</pre>\n<p>\nIf Grails doesn't pick up the environment variable, replace <b>${GRAILS_HOME}</b> with the full path to your Grails installation, like so:\n</p>\n<pre class=\"prettyprint\">\n-javaagent:/Users/kylewbanks/dev/grails-2.2.1/lib/org.springsource.springloaded/springloaded-core/jars/springloaded-core-1.1.1.jar -Xverify:none\n</pre>\n\n<p>\nI recommend reading about the <b>-Xverify:none</b> command before using it, and you can do so <a href=\"http://pic.dhe.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=%2Fcom.ibm.websphere.express.doc%2Finfo%2Fexp%2Fae%2Furun_rconfproc_jvm.html\">here</a>. Essentially what it does is disable class verification, which can lead to some strange behaviour in some cases.\n</p>\n\n<p>\nWith this VM option set, you should be good to go!\n</p>","date":"4/2/2013 00:01 AM","preview":"\nIt seems that ever since Grails 2.1 arrived, controller classes have not been auto-reloaded when edited in a development environment. I'm not sure if this is now the intended behaviour of controllers, but it sure can make for slower development and debugging. \n","title":"Fix Issue with Grails not Auto-Reloading Controllers in 2.1+","url":"http://kylewbanks.com/blog/Fix-Grails-Not-Auto-Reloading-Controllers","author":"Kyle Banks","id":52,"tags":[]},{"body":"<p>\nLike so many of the iOS UI components, the <b>UITabBarItem</b> is very easy to customize and manipulate. This post will show you how to add some basic customization to your tab bar, by defining custom images for each tab based on the state of the tab. By default, a blue tint is applied to the selected tab, but we can go further than that by completely changing the image, or applying our own tint to it.\n</p>\n\n<p>\nIn your <b>UITabBarController</b>, add the following to the <b>viewDidLoad</b> method:\n</p>\n\n<pre class=\"prettyprint\">\n- (void)viewDidLoad \n{\n    [super viewDidLoad];\n\n    //Iterate through the tabs and set the on/off images\n    for(UITabBarItem *tbItem in [[self tabBar] items])\n    {\n        [tabBarItems addObject:tbItem];\n        [tbItem setFinishedSelectedImage:[self imageForTabBarItem:[tbItem tag] selected:YES]\n             withFinishedUnselectedImage:[self imageForTabBarItem:[tbItem tag] selected:NO]];\n    }\n}\n</pre>\n\n<p>\nNext, create the following method to determine which image is appropriate based on the tab index and the selected state of the tab:\n</p>\n<pre class=\"prettyprint\">\n- (UIImage *)imageForTabBarItem:(int)tab selected:(BOOL)selected\n{\n    NSString *imageName;\n    switch(tab)\n    {\n        case 0:\n            imageName = [NSString stringWithFormat:@\"nav_one_%@.png\", selected ? @\"on\":@\"off\"];\n            break;\n        case 1:\n            imageName = [NSString stringWithFormat:@\"nav_two_%@.png\", selected ? @\"on\":@\"off\"];\n            break;\n        case 2:\n            imageName = [NSString stringWithFormat:@\"nav_three_%@.png\", selected ? @\"on\":@\"off\"];\n            break;\n    }\n    return [UIImage imageNamed:imageName];\n}\n</pre>\n\n<p>\nEach of your image names will have to conform to a simple standard in order for this to work. The off, or unselected, image will be named <b>image_name_off.png</b>, while the on, or selected, image will have the same name except with an 'on' suffix, like <b>image_name_on.png</b>.\n</p>","date":"4/4/2013 00:01 AM","preview":"\nLike so many of the iOS UI components, the <b>UITabBarItem</b> is very easy to customize and manipulate. This post will show you how to add some basic customization to your tab bar, by defining custom images for each tab based on the state of the tab. By default, a blue tint is applied to the selected tab, but we can go further than that by completely changing the image, or applying our own tint to it.\n","title":"Customizing Selected/Unselected UITabBarItem Images in a UITabBarController","url":"http://kylewbanks.com/blog/Customizing-UITabBarController-Selected-Unselected-Images","author":"Kyle Banks","id":53,"tags":[]},{"body":"<p>\nImplementing a custom 404 page can be an effective way to retain visits from people who have found a dead link to your site, or have stumbled upon a page that doesn't exist. Depending on the content of the URL, you may even be able to show the vistor some links they may be interested in based on related content. \n</p>\n\n<p>\nIn this post, I'm going to show you the process of setting up a simple 404 page that you can use to inform your users that they have stumbled upon some non-existent content. Using this method, you should be able to go a step further and customize the view however you like. For an example of how this will work, click on this <a href=\"/404\">broken link</a> (which is much nicer than the default Tomcat 404...)\n</p>\n\n<p>\nThe first step is to declare the 404 page in <b>grails-app/conf/UrlMappings.groovy</b>. You can see that this is the default file with the addition of just one line, containing <b>\"404\"(view: '/404')</b>.\n</p>\n\n<pre class=\"prettyprint\">\nclass UrlMappings {\n\n\tstatic mappings = {\n\t\t\"/$controller/$action?/$id?\"{\n\t\t\tconstraints {\n\t\t\t\t// apply constraints here\n\t\t\t}\n\t\t}\n\n\t\t\"/\"(view:\"/index\")\n\t\t\"500\"(view:'/error')\n                \"404\"(view: '/404')\n\t}\n}\n</pre>\n\n<p>\nThe next step is to create a <b>grails-app/views/404.gsp</b> view that will contain the content of your 404 page. Here is the very simple 404 I use for this site:\n</p>\n\n<pre class=\"prettyprint\">\n&lt;%@ page contentType=\"text/html;charset=UTF-8\" %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta name=\"layout\" content=\"main\"&gt;\n    &lt;title&gt;That's a Fail... | Kyle W. Banks&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;Well, that's a fail...&lt;/h2&gt;\n\n    &lt;p&gt;\n        This page doesn't seem to exist anymore, or perhaps it never did. It's tough to say for sure.\n        What I do know, however, is that you can find plenty of other great content right over &lt;a href=\"/\"&gt;&lt;b&gt;here&lt;/b&gt;&lt;/a&gt;.\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n\n<p>\nNow every time a 404 error is raised (i.e. a controller/action is not found), users will see the content of <b>404.gsp</b>. Obviously 404 pages are meant as a last resort when a page is not found, but what about when a user navigates to a URL that they aren't meant to see? \n</p>\n\n<p>\nFor instance, if you have an administrative panel on your website, you may want to check if the user is authenticated, and if not, show a 404 (just so they don't think there is any content there). In this case, the only administrative page that should be available is the login page, and all others throw a 404. In order to do this, we need to be able to raise a 404 error from within a controller:\n</p>\n\n<pre class=\"prettyprint\">\n//Example of throwing a 404 error from within a controller\ndef adminPage() {\n    if(!loginService.userIsAdmin(session)) {\n         log.error(\"Unauthorized access, throwing 404!\")\n         return response.sendError(404)                 \n    }\n\n    //User is authenticated, business as usual...\n}\n</pre>\n\n<p>\nHere, our theoretical <b>loginService</b> will check the session for the proper credentials to access the administrative panel, and if it deems the user is not authorized, we throw a 404 response. Grails will intercept this error and show our 404 page automatically.\n</p>","date":"4/5/2013 00:01 AM","preview":"\nImplementing a custom 404 page can be an effective way to retain visits from people who have found a dead link to your site, or have stumbled upon a page that doesn't exist. Depending on the content of the URL, you may even be able to show the vistor some links they may be interested in based on related content. \n","title":"Creating a Custom 404 Page in Grails, and How to Raise a 404 Error","url":"http://kylewbanks.com/blog/Create-Custom-404-Page-Grails","author":"Kyle Banks","id":54,"tags":[]},{"body":"<p>Welcome to Part 1 of my <b>Programming with Dart</b> tutorial. In this series I will help you get started writing Dart code by teaching you the fundamentals of the language, and give you a little background on it as well. So, without further ado, let's get started.</p>\n\n<h3>What's Dart</h3>\n\n<p>\n<a href=\"http://www.dartlang.org/\">Dart</a> is a programming language actively developed by Google, and is intended to ultimately replace JavaScript. I think the Dart developers explain it best:\n</p>\n\n<blockquote cite=\"http://dartlang.org\"><i>\nDart is a class-based, object-oriented language with lexical scoping, closures, and optional static typing. Dart helps you build structured modern web apps and is easy to learn for a wide range of developers.\n</i></blockquote>\n\n<p>\nThink JavaScript with a little less <i>Script</i>, and a little more <i>Java</i> (I know JavaScript has nothing to do with Java, just go with it, OK?). Once you have written your code in Dart, you have one of two options. You can either compile it into JavaScript, or execute it as Dart code and run it in a Dart VM. Dart code is intended to be much faster and more efficient than JavaScript, but more browsers understand JavaScript than Dart at the moment, so you lose reach. At the time of writing this only Chromium supports native Dart code, and no other major browsers (not even <a href=\"http://www.youtube.com/watch?feature=player_embedded&v=TlJob8K_OwE\">Blink</a>) have plans to adopt Dart.\n</p>\n\n<p>\nWhether or not Dart succeeds in it's goal of replacing JavaScript remains to be seen, but in the meantime it remains a very intriguing language to learn, if for nothing but curiosity's sake.\n</p>\n\n<p>\nFor a more in-depth and technical look into Dart, I highly recommend <a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html\">taking a tour of Dart</a>.\n</p>\n\n<h3>Let's Get Started:</h3>\n\n<p>\nThe first thing we need to do is set up our development environment:\n</p>\n\n<ol>\n<li><p>First up: <a href=\"http://www.dartlang.org/tools/editor/\">Download the Dart Editor</a>, and unzip it to a location of your choosing. I picked <b>~/dev/dart</b>, so the rest of this tutorial (and subsequent tutorials) will assume you did as well.</p></li>\n\n<li><p>You're done. Seriously, that's it. Dart Editor comes with the SDK and all of the tools you need to get started. Easy enough, huh?</p></li>\n</ol>\n\n<p>For more information on setting up your Dart environment, or for using Dart with another IDE, <a href=\"http://www.dartlang.org/tools/\">click here</a>.</p>\n\n<p>\nNo matter which development environment you choose, once you are ready to get coding, we can start with a simple <b>Hello World</b> program.\n</p>\n\n<h3>Hello, Dart!</h3>\n\n<p>Open up you're new Dart Editor and let's get started.</p>\n\n<p>For the purposes of this tutorial we are going to create two simple Hello World applications. The first will run in the command line, and the second will run in the <b>Chromium</b> browser that we downloaded as a part of the Dart development environment (<b>~/dev/dart/chromium</b>).</p>\n\n<h4>Command-Line</h4>\n\n<ol>\n<li><p>Click <b>File -> New Application</b> and name it <b>HelloDart</b>. Make sure you select <b>Command-line application</b>, and leave <b>Generate sample content</b> selected.</p></li>\n<li>\n<p>Once the application is created, the Hello World sample will be ready for us. It's really quite basic, and contains only a <b>main</b> function and a <b>print</b> statement.</p>\n<pre class=\"prettyprint\">\n//hellodart.dart\nvoid main() {\n  print(\"Hello, World!\");\n}\n</pre>\n</li>\n<li>\n<p>Click <b>Run</b> (the green circle with a white arrow, top left of the IDE window) and you should see the classic <i>Hello, World!</i> printed in the console at the bottom of your IDE.</p>\n</li>\n</ol>\n\n<p>\nThis application may be very basic, but it gives us some information about how Dart is written. First off, we can see that it uses a C-style syntax. Secondly, rather than JavaScript being written just about anywhere you want, our Dart code lives within a <b>main</b> function. If we take it out of the <b>main</b> function, it won't run. Go ahead and try it.\n</p>\n\n<h4>Browser</h4>\n<p>\nNow lets get to something a little bit more exciting, shall we. We are still going to keep this simple, but rather than printing to the command-line, let's say hello to the browser. We will create an HTML element that, when clicked, produces an alert with the text <b>Hello, World!</b>\n</p>\n\n<ol>\n<li>\n<p>In your <b>HelloDart</b> project, open the file called <b>pubspec.yaml</b> and select <b>source</b> at the bottom of the editor. We need to add a dependency called <i>browser</i>, like so:</p>\n\n<pre class=\"prettyprint\">\nname: HelloDart\ndescription: A sample command-line application\ndependencies:\n  browser: any\n</pre>\n</li>\n\n<li><p>Next up we need to create an HTML file that we can use for our application's display. Right-click the <b>bin</b> directory in your project navigator, and select <b>New File</b>. Name the file <b>hellodart.html</b>.</p>\n<p>Once the file is created, you should see a very basic HTML file populated with some standard elements. However, there are two elements in particular that are of interest to us: </p>\n\n<pre class=\"prettyprint\">\n&lt;p id=\"text\"&gt;&lt;/p&gt;\n&lt;script type=\"application/dart\" src=\"hellodart.dart\"&gt;&lt;/script&gt;\n</pre>\n\n<p>\nFirst, the <b>paragraph</b> tag with the <b>id</b> of <b>text</b> gives us a placeholder where we can put some text from our Dart code. Secondly, the <b>script</b> tag here is pointing to <b>hellodart.dart</b>, and has a type of <b>application/dart</b>. This instructs the browser to load our Dart code and execute it from it's Dart VM. As I mentioned earlier, only Chromium is capable of running Dart code, so we know that's the browser we will have to run our code in. \n</p>\n</li>\n\n<li>\n<p>Now that we have an HTML page for our display, we can modify our <b>hellodart.dart</b> file to put some text in the <b>paragraph</b> tag. Before we can access the HTML though, we need to import the appropriate library to give us HTML support:</p>\n\n<pre class=\"prettyprint\">\n//hellodart.dart\nimport 'dart:html';\n</pre>\n<p>\nPretty standard import statement right? Well, we have learned that we can create libraries that other applications can import. I'd say that's pretty neat.\n</p>\n\n<li>\nOkay, now we are finally ready to write some code. We are going to use a Dart method called <b>query</b> which will search for an HTML element for us, and allow us to modify it programmatically. Let's search for <b>#text</b>, which will give us access the to <b>paragraph</b> tag we saw above. Within the <b>main</b> function:\n</li>\n\n<pre class=\"prettyprint\">\nquery('#text').text = \"Greetings!\";\n</pre>\n\n<p>Go ahead and run this. You will notice that the <b>Chromium</b> browser opens up automatically, and shows us a blank page with the text <i>Greetings!</i> printed. This is all well and good, but lets add that click-event we talked about.</p>\n</li>\n\n<li>\nTo add the click-event, we have a couple of options. We could either <b>query</b> for the element again, store the element in a variable, or chain the commands. Let's take a look at how Dart handles chaining:\n</li>\n\n<pre class=\"prettyprint\">\n//hellodart.dart\nimport 'dart:html';\n\nvoid main() {\n  query('#text')\n    ..text = \"Greetings!\"\n    ..onClick.listen(handleClick);\n}\n\nvoid handleClick(MouseEvent event) {\n  print(\"//TODO\");\n}\n</pre>\n\n<p>\nRather than using a single dot (.), we use two dots (..) to indicate that the commands are going to be chained. Only after the final command do we enter a semi-colon to indicate that the chain has completed. \n</p>\n\n<p>\nYou will also notice that we have defined a new method that accepts a <b>MouseEvent</b> parameter. When the <b>#text</b> element is clicked, it will invoke <b>handleClick</b> and pass with it the click event that caused it.\n</p>\n\n<p>\nGo ahead and run this, and when you click on the <i>Greetings!</i> text, you should notice in your IDE's console that the text <i>//TODO</i> has been printed. It's good to know that even in web application mode we can still log to the command-line. This will be great for debugging applications down the line.\n</p>\n\n<li>\n<p>\nNow let's wrap up this application. Inside the <b>handleClick</b> event, we are going to create an alert dialog with the text <i>Hello, World!</i>\n</p>\n\n<pre class=\"prettyprint\">\nvoid handleClick(MouseEvent event) {\n  window.alert(\"Hello, World!\");\n}\n</pre>\n\n<p>Run the application, click the text again, and you should see a big ol' popup dialog with the text <i>Hello, World!</i></p>\n</li>\n</ol>\n\n<h3>Conclusion</h3>\n<p>\nWell, there you have it: a command-line and web based <b>Hello World</b> tutorial for Dart. Play around with the code, and see what you can come up with. I will be posting a second part to this tutorial shortly which goes into more depth on Dart, and where we will create a more advanced web application.</p>\n\n<p><b>Update:</b> <a href=\"/blog/Get-Started-Programming-with-Dart-Part-2-Calculator\">Part 2</a> is now available\n</p>","date":"4/13/2013 00:01 AM","preview":"Welcome to Part 1 of my <b>Programming with Dart</b> tutorial. In this series I will help you get started writing Dart code by teaching you the fundamentals of the language, and give you a little background on it as well. So, without further ado, let's get started.","title":"Part 1: Get Started Programming with Dart","url":"http://kylewbanks.com/blog/Get-Started-Programming-with-Dart","author":"Kyle Banks","id":57,"tags":[]},{"body":"<style>\n#calculator-demo {\nwidth: 100%;\nheight: 640px;\nborder: none;\noverflow: hidden;\n}\n</style>\n\n<p><i>Note: For best results using the following demo I recommend using Google Chrome</i></p>\n\n<iframe id=\"calculator-demo\" src=\"https://s3.amazonaws.com/kylewbanks/dart-tutorial-2/index.html\"></iframe>\n\n<p>\nWelcome back for Part 2 of my Dart Tutorial Series, where we will be building the calculator you see above. This tutorial will give you a better understanding of the fundamentals of Dart including basic math operations, dynamic vs. static typing, type conversion, conditional statements, and loops.\n</p>\n\n<p>\n<i>In case you missed it, I recommend working through <a href=\"/blog/Get-Started-Programming-with-Dart\">Part 1</a> before attempting this section. In addition, the full source code for this tutorial is available <a href=\"https://github.com/KyleBanks/DartCalculator\">here</a>.</i>\n</p>\n\n<h3>Getting Started</h3>\n\n<p>\nThe first thing we have to do, of course, is create a new project called <b>DartCalculator</b>. The project is a <b>Web application</b>, and you can go ahead and leave <b>Generate sample content</b> checked. We will be overwriting most of the code anyways, but it's a nice starting point.\n</p>\n\n<p>\nBecause this tutorial is about Dart, I've provided the necessary CSS/HTML and will not go over it too much. You can download the two necessary files <a href=\"https://github.com/KyleBanks/DartCalculator/tree/master/web\">here</a>. Copy <b>dartcalculator.css</b> and <b>dartcalculator.html</b> into your project, overwriting the original files. I recommend having a quick look through <b>dartcalculator.html</b> so you have an idea of the elements we will be working with.\n</p>\n\n<p>\nGo ahead and get rid of the unnecessary code in <b>dartcalculator.dart</b> so you are left with the following:\n</p>\n\n<pre class=\"prettyprint\">\nimport 'dart:html';\n\nvoid main() {\n\n}\n</pre>\n\n<h3>Let's Get Coding</h3>\n\n<p>Alright, we are now ready to get started. The first thing we are going to do is create references to the calculator's screen, all numeric buttons, the decimal button, clear, and clear everything. We will come back to the operation (+ - / *) and equals buttons later on.</p>\n\n<pre class=\"prettyprint\">\nimport 'dart:html';\n\nDivElement screen;\nList&lt;DivElement&gt; numbers;\nDivElement decimal;\nDivElement clear;\nDivElement clearAll;\n\nvoid main() {\n    screen = query(\"#calculator_screen\");\n    numbers = queryAll(\".number\");\n    decimal = query(\"#decimal\");\n    clear = query(\"#clear\");\n    clearAll = query(\"#clear-everything\");\n}\n</pre>\n\n<p>Now, there are few things to note here. Rather than using <b>var</b> like in JavaScript, we have chosen to define each variable statically, meaning they are type-checked, constraining them to the appropriate class (and subclasses). If you prefer, you are still free to use <b>var</b> the same way as you would in JavaScript.\n</p>\n<p>\nThe second thing to notice is that because <b>numbers</b> is a <b>List</b>, and because <b>query</b> returns a single element, we are using <b>queryAll</b> to get a list of all elements with the class <b>number</b>. I don't know about you, but I'd rather not type out a query for each number, and store each in it's own variable. \n</p>\n\n<h4>Adding Click Events</h4>\n<p>\nAdding click events to each element is nothing new, however because <b>numbers</b> is a <b>List</b> we are going to have to iterate through it and assign a click event to each one. Again, I'm lazy, so I'd like to have each of them make use of the same click event. In your <b>main</b> method, after you assign the variables:\n</p>\n\n<pre class=\"prettyprint\">\nvoid main() {\n   ...\n\n   for(DivElement number in numbers) {\n      number.onClick.listen(numberClicked); \n   }\n   decimal.onClick.listen(decimalClicked);\n   clear.onClick.listen(clearScreen);\n   clearAll.onClick.listen(clearEverything);\n\n   clearEverything(null); //Ensures a fresh slate at application launch\n}\n\n//Stub out each of the click event handlers like so\nvoid numberClicked(MouseEvent event) {\n   //TODO:\n}\n...\n</pre>\n\n<p>Make sure to stub out each click event handler like I did with <b>numberClicked</b> above. We will come back to them in a second. Before we go on to handling each event, I'd like to take a look at what we did, specifically with the <b>numbers</b> list. </p>\n\n<p>What we wrote there is called a <b>foreach</b> loop. This type of loop is very common in programming, but is not available in JavaScript, something that Dart aims to fix. Essentially it gives you access to each <b>DivElement</b> in the list <b>numbers</b> by assigning it to the variable <b>number</b>. Within the loop, we can do anything we like to <b>number</b>, in this case assigning it a click-event handler.</p>\n\n<h4>Implementing Click Events</h4>\n<p>\nMost of the code here is pretty self-explanatory, so I won't go over it in much detail. Have a look through it, and make sure you understand what's going on.\n</p>\n\n<pre class=\"prettyprint\">\n/**\n * Called when a number button (0-9) is clicked.\n */\nvoid numberClicked(MouseEvent event)  {\n    //If the number is currently '0', clear it\n    if(screen.text == \"0\") {\n        screen.text = \"\";\n    }\n    \n    //Add the number clicked to the screen, if the screen number's length is less than 10\n    if(screen.text.length < 10) {\n        screen.text = screen.text + event.toElement.text;\n    }\n}\n\n/**\n * Add a decimal to the current number, if there is not already a decimal on screen.\n */\nvoid decimalClicked(MouseEvent event) {\n    if(!screen.text.contains(\".\")) {\n        screen.text = screen.text + \".\";\n    }\n}\n\n/**\n * Clear the screen of the current number\n */\nvoid clearScreen(MouseEvent event) {\n    //Reset the screen number back to 0\n    screen.text = \"0\";   \n}\n\n/**\n * Clear the screen and all locally stored variables\n */\nvoid clearEverything(MouseEvent event) {\n    clearScreen(event);\n    //TODO: Once we start storing variables, we will need to reset them here.\n}\n</pre>\n\n<p>\nAt this point you should be able to run the application, put some numbers and a decimal point on the calculator's screen, and clear it. It's not much, but it's a start.\n</p>\n\n<p>\nOne thing I want to make sure you notice is in <b>numberClicked</b> where we get the number of the button without having to know which button it was. This is because the <b>MouseEvent</b> class gives you access to the element that was clicked through the <b>toElement</b> method. By using this, we can get the text of the button that was clicked (0, 1, 2, 3, etc...) and put it on the screen, all while never needing to know which button it was.\n</p>\n\n<h4>Implementing Operations</h4>\n\n<p>Once you are satisfied with the previous code, we can start to make it actually do something useful. So here's how the calculator is going to work.</p>\n<ol>\n<li>The user enters a number (or leaves it at zero), and selects an operation type. When the operation type is selected we will highlight the button so they can remember which one it was. If it is the first time hitting an operation, we will store the number in a variable, and allow the user to enter the next number, otherwise we simply switch the operation type.</li>\n<li>Once the second number has been typed, the user can click the equals button (if they are still on the first number, we do nothing). At this point, we perform the selected operation type, and output the number to the screen. Once this is done, we need to clear all stored data and 'refresh' the calculator. The output of the operation will become the first number of a new operation, and the cycle continues.</li>\n</ol>\n\n<p>So first up, let's define some constant variables that represent the different operation types, and one variable to contain the selected one. At the top of <b>dartcalculator.dart</b> (after the import statement):</p>\n\n<pre class=\"prettyprint\">\nconst int unknown = -1;\nconst int OperationTypeAdd = 1;\nconst int OperationTypeSubtract = 2;\nconst int OperationTypeMultiply = 3;\nconst int OperationTypeDivide = 4;\n\nint operationType = unknown;\n</pre>\n\n<p>With the constants defined, we are ready to query the elements and add click events. We will also need that variable we discussed to store the first number entered in each operation:</p>\n\n<pre class=\"prettyprint\">\ndouble number1;\n\nDivElement add;\nDivElement subtract;\nDivElement multiply;\nDivElement divide;\n\nvoid main() {\n    ...\n\n    add = query(\"#add\");\n    add.onClick.listen(addClicked);\n    subtract = query(\"#subtract\");\n    subtract.onClick.listen(subtractClicked);\n    multiply = query(\"#multiply\");\n    multiply.onClick.listen(multiplyClicked);\n    divide = query(\"#divide\");\n    divide.onClick.listen(divideClicked);\n    \n    ...\n}\n\n...\n\nvoid addClicked(MouseEvent event) {\n    operationType = OperationTypeAdd;\n    operationTypeChanged(event.toElement);\n}\nvoid subtractClicked(MouseEvent event) {\n    operationType = OperationTypeSubtract;\n    operationTypeChanged(event.toElement);\n}\nvoid multiplyClicked(MouseEvent event) {\n    operationType = OperationTypeMultiply;\n    operationTypeChanged(event.toElement);\n}\nvoid divideClicked(MouseEvent event) {\n    operationType = OperationTypeDivide;\n    operationTypeChanged(event.toElement);\n}\n/** \n * Each operation button calls this method after their click-event is processed\n */\nvoid operationTypeChanged(Element selected) {\n    //Remove the selected class from each operation button (+ - / *)\n    List&lt;Element&gt; operationElements = queryAll(\".operation\");\n    for(Element element in operationElements) {\n        element.classes.remove(\"selected\");\n    }\n    \n    if(operationType != unknown) {\n        //Add the selected class to the element that was just clicked\n        selected.classes.add(\"selected\");\n        \n        //Assign the 'number1' variable, if it isn't already\n        if(number1 == null) {\n            number1 = double.parse(screen.text);\n            screen.text = \"0\";\n        }\n    }\n}\n</pre>\n\n<p>Alright this is a big chunk of code, so let's break down the bits that may not be obvious. Basically when each operation button is clicked, we assign it's constant value to a global variable. This will allow us to access it later, without having to go to the DOM and check which button has the <b>selected</b> class.</p>\n\n<p>Speaking of which, each of the operations' click events calls <b>operationTypeChanged</b> with it's element upon completion. This method will remove the <b>selected</b> class from each of the operation buttons as you can see in the <b>foreach</b> loop above. Once that's done, it adds the <b>selected</b> class to the element that was clicked. Finally, if there is no <b>number1</b> variable set, it parses the text of the calculator's screen as a <b>double</b> and sets it's text to <i>0</i>.</p>\n\n<p>Now there is one more thing we have to do before we can implement the equals functionality. Remember that <b>clearEverything</b> event? Well we have some variables to clean-up in there now.</p>\n\n<pre class=\"prettyprint\">\n/**\n * Clear the screen and all locally stored variables\n */\nvoid clearEverything(MouseEvent event) {\n    clearScreen(event);\n    operationType = unknown;\n    operationTypeChanged(null);\n    number1 = null;\n}\n</pre>\n\n<p>You'll see that we are calling <b>operationTypeChanged</b> from <b>clearEverything</b>. This is to have the <b>selected</b> class removed from each button, without having to duplicate the code. It's safe to pass null because we set the <b>operationType</b> to <b>unknown</b> prior to doing so. When the operation type is unknown, <b>operationTypeChanged</b> doesn't make use of the passed element.</p>\n\n<h4>Bringing It All Together</h4>\n\n<p>Time has now come to implement the equals method. As usual, we need to define the element variable, query the DOM, and assign a click event:</p>\n\n<pre class=\"prettyprint\">\nDivElement equals;\n\n...\n\nvoid main() {\n    ...\n\n    equals = query(\"#equals\");\n    equals.onClick.listen(equalsClicked);\n}\n</pre>\n\n<p>Now let's take a look at the <b>equalsClicked</b> method:</p>\n\n<pre class=\"prettyprint\">\nvoid equalsClicked(MouseEvent event) {\n    if(number1 != null && operationType != unknown) {\n        double result;\n        double number2 = double.parse(screen.text);\n\n        switch(operationType) {\n            case OperationTypeAdd:\n              result = number1 + number2;\n              break;\n            case OperationTypeSubtract:\n              result = number1 - number2;\n              break;\n            case OperationTypeMultiply:\n              result = number1 * number2;\n              break;\n            case OperationTypeDivide:\n              result = number1 / number2;\n              break;\n        }\n        \n        clearEverything(null);\n        String displayString = result.toString();\n        if(displayString.length > 10) {\n            displayString = displayString.substring(0, 10);\n        }\n        screen.text = displayString;\n    }\n}\n</pre>\n\n<p>We only want to do anything if the user has entered their first number and selected an operation type. If not, there is nothing for us to do yet. If the data looks good, we are going to parse the second number from the screen, and do a <b>switch</b> on the operation type. Depending on the operation type, we assign the variable <b>result</b> to the value of the appropriate operation.</p>\n\n<p>Once we have the result, we call <b>clearEverything</b> to reset all data. We won't be needing any of it anymore. The one thing we will need though, is the new result. This now becomes <b>number1</b> and is printed to the calculator's screen. The one thing we need to ensure though, is that only the first 10 digits of the number are displayed. Anything more than that will overflow the screen.</p>\n\n\n<h3>Now What?</h3>\n\n<p>\nHopefully this calculator has been a good starting point in your Dart programming career, but it is far from finished. There are two main bugs to sort out, and one feature that would be a good challenge to implement.\n</p>\n\n<p>The first bug is dividing by zero, but not in the way you would expect (try it out, I'm sure you will find the problem). The second is a little more complicated. When we display the result of an operation, we only show the first 10 digits. This works fine for numbers like  <i>3.33333....</i> or really anything where there is a decimal before digit 9. However, what happens if the decimal is at digit 10, or any digit after that? What if the number is more than 10 digits, and there is no decimal?</p>\n\n<p>If you are looking for a more difficult challenge, why not make the calculator work on key press? That means that users could perform calculations by typing the numbers, and selecting the operations from their keyboard. Perhaps use <b>backspace</b> and <b>escape</b> for the clear and clear-all functionality?</p>\n\n<p>If you come up with a solution for either of the mentioned bugs, or implement the keyboard calculator, be sure to comment with your solution.</p>","date":"4/14/2013 00:01 AM","preview":"<i>Note: For best results using the following demo I recommend using Google Chrome</i>","title":"Part 2: Get Started Programming with Dart - Building a Calculator","url":"http://kylewbanks.com/blog/Get-Started-Programming-with-Dart-Part-2-Calculator","author":"Kyle Banks","id":58,"tags":[]},{"body":"<p>\nWhen I was working on redesigning the side-navigation for this site, I wanted to add some color to it without making it distracting while reading posts. I decided that the white background was great during reading because it lets the eye focus on the blog content, but visually it leaves something to be desired.\n</p>\n\n<p>\nThe solution I came up with is the grey background and slightly darker border you see now, giving the illusion that it's in the background, almost behind the blog content. I love the look, but I still find it distracting while reading. So I know it needs to be less distracting while reading, but how do you determine if the user is reading? Well, they scroll.\n</p>\n\n<h3>Detecting Scroll Events</h3>\n\n<p>\nThe first thing you have to do is detect when the user is scrolling the page. Because this event can potentially fire hundreds, if not thousands of times during a normal scroll, be careful not to do any heavy processing in it. \n</p>\n\n<pre class=\"prettyprint\">\n    $(window).scroll(function() {\n        //User is scrolling\n    });\n</pre>\n\n<p>\nThe above code binds the <b>scroll</b> event to <b>window</b>, meaning it will fire any time the page scrolls. If you want, you can bind this event to any element that may scroll independently from <b>window</b> such as a <b>textarea</b>.\n</p>\n\n<h3>Detecting the Scroll Offset</h3>\n\n<p>\nOnce you know the user has scrolled you can detect whereabouts on the page they are. For the purpose of this blog, I needed to know whether or not they were at the top of the page.\n</p>\n\n<pre class=\"prettyprint\">\n    $(window).scroll(function() {\n        if($(window).scrollTop() > 0) {\n            headerOff();\n        } else {\n            headerOn();\n        }\n    });\n</pre>\n\n<p>\nUsing the <b>scrollTop</b> method you can determine if they have scrolled down the page. You can see this in action by scrolling up and down this page. When you are at the top, the side-navigation (header) lights up. When you scroll down, it goes opaque. In addition to <b>scrollTop</b>, you can also make use of <b>scrollBottom</b>, <b>scrollRight</b>, and <b>scrollLeft</b>.\n</p>\n\n<p>\nIf you look through the <a href=\"/static/js/app.js\">JavaScript</a> source code, you will notice that in the <b>headerOn</b> and <b>headerOff</b> methods I only do any DOM manipulation if the header isn't already in the desired state (I do this by applying a CSS off class when the user scrolls down, and removing it when they reach the top). This significantly reduces the amount of processing required during scrolling, and is very important to maintain a smooth UX.\n</p>","date":"4/20/2013 00:01 AM","preview":"\nWhen I was working on redesigning the side-navigation for this site, I wanted to add some color to it without making it distracting while reading posts. I decided that the white background was great during reading because it lets the eye focus on the blog content, but visually it leaves something to be desired.\n","title":"Detecting Scroll Events and Getting the Current Scroll Offset with jQuery","url":"http://kylewbanks.com/blog/Detecting-Scroll-Events-And-Getting-Scroll-Offset-With-jQuery","author":"Kyle Banks","id":122,"tags":[]},{"body":"<p>\nRecently I was parsing a REST API that returned data in JSON format, and noticed that this particular API formatted it's dates in a peculiar way: \n</p>\n\n<pre>\n\"time\": \"4/29/13 3:39 PM\"\n</pre>\n\n<p>\nWhat's peculiar about this is that there is no time zone information in the string (and that it's a string in the first place). I assumed that the time zone was UTC, and further research into the API proved this to be the case. \n</p>\n\n<p>\nUsing GSON, a problem arose with this date format. It was fine parsing the string into a <b>Date</b> object, but it was expecting the time zone to be the system timezone, EDT. Obviously this is ineffective since the above time should be <b>11:39 AM EDT</b>, but it parsed it as <b>3:39 PM EDT</b>. \n</p>\n\n<p>\nA little digging into the GSON date formatting API revealed the problem. I had been using the following code to instruct GSON on how to parse the dates: \n</p>\n\n<pre class=\"prettyprint\">\nGsonBuilder gsonBuilder = new GsonBuilder();\ngsonBuilder.setDateFormat(\"M/d/yy hh:mm a\");\n...\n</pre>\n\n<p>\nThe problem is that this method doesn't instruct GSON which time zone to use, so it uses that system setting. \n</p>\n\n<p>\nThe solution is to implement your own date deserializer, which we can use to hardcode the time zone to use (in this case UTC). In addition, you can also parse the date any way you need, giving you more control over them (the process is very similar to mapping <a href=\"/blog/Int-Enum-Mapping-with-GSON\">integers to enums</a>).\n</p>\n\n<p>\nFirst, we create our deserializer:\n</p>\n\n<pre class=\"prettyprint\">\nimport java.lang.reflect.Type;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.TimeZone;\n\nimport com.google.gson.JsonDeserializationContext;\nimport com.google.gson.JsonDeserializer;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParseException;\n\npublic class DateDeserializer implements JsonDeserializer&lt;Date&gt; {\n\n\t@Override\n\tpublic Date deserialize(JsonElement element, Type arg1, JsonDeserializationContext arg2) throws JsonParseException {\n\t\tString date = element.getAsString();\n\t\t\n\t\tSimpleDateFormat formatter = new SimpleDateFormat(\"M/d/yy hh:mm a\");\n\t\tformatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\t\t\n\t\ttry {\n\t\t\treturn formatter.parse(date);\n\t\t} catch (ParseException e) {\n\t\t\tSystem.err.println(\"Failed to parse Date due to:\", e);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n</pre>\n\n<p>\nWhen called, this will read a <b>JsonElement</b> as a <b>String</b>, and attempt to parse it as a UTC timestamp with the format <b>M/d/yy hh:mm a</b> (seen above). If the parsing fails, it will log the error and return null. \n</p>\n\n<p>\nWith the deserializer ready to go, all that's left is to instruct GSON to make use of it:\n</p>\n\n<pre class=\"prettyprint\">\nGsonBuilder gsonBuilder = new GsonBuilder();\ngsonBuilder.registerTypeAdapter(Date.class, new DateDeserializer());\n...\n</pre>\n\n<p>\nNow any time one of your models with a <b>Date</b> property is being constructed by GSON, it will invoke the <b>DateDeserializer#deserialize</b> method and allow us to completely customize how the date should be handled.  \n</p>\n\n<p>\nThis method of deserializing dates is also completely compatible with using <a href=\"/blog/Tutorial-Android-Parsing-JSON-with-GSON\">GSON with Android</a>.\n</p>","date":"4/29/2013 00:01 AM","preview":"\nRecently I was parsing a REST API that returned data in JSON format, and noticed that this particular API formatted it's dates in a peculiar way: \n","title":"String to Date Parsing with GSON (and UTC Time Zone Handling)","url":"http://kylewbanks.com/blog/String-Date-Parsing-with-GSON-UTC-Time-Zone","author":"Kyle Banks","id":225,"tags":[]},{"body":"<h3>The Problem</h3>\n<p>\nBrowser security does not allow cross-domain AJAX requests. This means that a domain of <b>http://example.com</b> cannot request <b>http://twitter.com</b> using AJAX. A common solution to this is to use your server as a proxy, having it request the tweets and return it's response to your JavaScript. The problem with this is that you now have two network calls to wait for, and it requires a server-side language to implement. Is it possible to do this using only client-side JavaScript? Of course! \n</p>\n\n<h3>The Solution</h3>\n<p>\nRather than loading the Twitter JSON using AJAX, we can load it as a <b>&lt;script&gt;</b>, and use <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> to execute our JavaScript code when the JSON is returned. Because the JSON response is simply a JavaScript object (<b>J</b>avas<b>S</b>cript <b>O</b>bject <b>N</b>otation), it is entirely acceptable to pass it as a function parameter. Let's take a look at what the script from Twitter will need to look like:\n</p>\n\n<pre class=\"prettyprint\">\nexecuteCallback({\"this\": \"is JSON\"});\n</pre>\n\n<p>\nSo how do we tell Twitter to format the JSON inside of a function call like that, rather than just responding with plain old JSON? Well, luckily for us they have built it into their API (as have many other REST APIs, actually). We just need to pass a parameter to the REST calls like so: \n</p>\n\n<pre class=\"prettyprint\">\nhttps://api.twitter.com/restMethod?callback=parseTweets\n</pre>\n\n<p>\nNow that Twitter knows to execute our JavaScript function <b>parseTweets</b>, let's parse some Tweets. In order to bypass the need to authenticate API requests I'm going to demonstrate this using Twitter API version 1, but the <b>callback</b> parameter works exactly the same in version 1.1. The following code is going to fetch <a href=\"http://twitter.com/kylewbanks\">my tweets</a> and log each one to <b>console.log</b> (if you are using IE, you can use <b>alert</b> instead).\n</p>\n\n<pre class=\"prettyprint\">\n&lt;script type=\"text/javascript\"&gt;\nfunction parseTweets(tweets) {\n\t$.each(tweets, function(i, tweet) {\n\t\tconsole.log(tweet);\n\t});\n}\n&lt;/script&gt;\n\n&ltscript src=\"https://api.twitter.com/1/statuses/user_timeline.json?screen_name=kylewbanks&callback=parseTweets\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</pre>\n\n<p>Now that you have the tweet objects, you are free to do with them what you will. This method will work for all Twitter API requests, and most REST APIs will offer a similar <b>callback</b> parameter.</p>\n\n<p>This is all well and good when you know the Twitter handle (or REST URL) on page load, but what if you want to make more API calls, or format your API requests based on user input?</p>\n\n<h3>Dynamic API Calls</h3>\n\n<p>\nThe solution is basically the same, with one minor change: the <b>script</b> must be inserted into the DOM using JavaScript once we have enough information to format the request URL. Using the example above, this may be allowing the user to enter a Twitter handle of their own:\n</p>\n\n<pre class=\"prettyprint\">\nvar s = document.createElement(\"script\");\ns.src = \"https://api.twitter.com/1/statuses/user_timeline.json?screen_name=\"+TWITTER_HANDLE+\"&callback=parseTweets\";\ns.type = \"text/javascript\";\n$('body').append(s);\n</pre>\n\n<p>\nWhat this does is generate a <b>script</b> tag and insert it at the end of the page's <b>body</b>. The variable <b>TWITTER_HANDLE</b> could be retrieved from a text input field, a drop down list, etc. Now that we can do this dynamically, we can continue to make calls at any time using JavaScript, not just on page load.\n</p>","date":"5/11/2013 00:01 AM","preview":"\nBrowser security does not allow cross-domain AJAX requests. This means that a domain of <b>http://example.com</b> cannot request <b>http://twitter.com</b> using AJAX. A common solution to this is to use your server as a proxy, having it request the tweets and return it's response to your JavaScript. The problem with this is that you now have two network calls to wait for, and it requires a server-side language to implement. Is it possible to do this using only client-side JavaScript? Of course! \n","title":"Fetching Cross-Domain JSON (Tweets) with JavaScript and JSONP","url":"http://kylewbanks.com/blog/Fetching-Cross-Domain-JSON-Tweets-with-JavaScript-and-JSONP","author":"Kyle Banks","id":400,"tags":[]},{"body":"<p>\nEveryone knows using the default font in an application can get a little boring. The new <b>Roboto</b> typeface in Android is all well and good, but it can leave something to be desired at times. Luckily, using a custom font is quite easy.\n</p>\n\n<p>\nThe first step is to create a new folder under your <b>assets</b> directory called <b>fonts</b>. Once that is done, you can simply put your TTF font file in the directory  (<b>$PROJECT/assets/fonts/my_font.ttf</b>).\n</p>\n\n<p>\nInitializing and applying the <b>Typeface</b> object is simple enough:\n</p>\n\n<pre class=\"prettyprint\">\nTypeface typeface = Typeface.createFromAsset(getAssets(),\"fonts/my_font.ttf\");\nmyTextview.setTypeface(typeface);\n</pre>\n\n<p>\nThere is however one problem with this approach. Let's say you have <b>my_font.ttf</b> and <b>my_font_bold.ttf</b>. If your <b>TextView</b> has the bold text style, it will be ignored because you applied the normal (non-bold) font. The same issue applies for italic styles.\n</p>\n\n<h3>A Cleaner Solution</h3>\n<p>\nNow that we have to do a check for bold (or italic) text styles, the code is going to be a little longer. Since we don't want to repeat this code throughout each <b>Activity</b> or <b>Fragment</b> that applies our custom font, I prefer to put the code in the <b>Application</b> class.\n</p>\n\n<pre class=\"prettyprint\">\npublic class MyApplication extends Application {\n\t\n    private Typeface normalFont;\n    private Typeface boldFont;\n\t\n    ...\n\t\n    // -- Fonts -- //\n    public void setTypeface(TextView textView) {\n        if(textView != null) {\n            if(textView.getTypeface() != null && textView.getTypeface().isBold()) {\n                textView.setTypeface(getBoldFont());\n            } else {\n                textView.setTypeface(getNormalFont());\n            }\n        }\n    }\n\n    private Typeface getNormalFont() {\n        if(normalFont == null) {\n            normalFont = Typeface.createFromAsset(getAssets(),\"fonts/my_font.ttf\");\n        }\n        return this.normalFont;\n    }\n\n    private Typeface getBoldFont() {\n        if(boldFont == null) {\n            boldFont = Typeface.createFromAsset(getAssets(),\"fonts/my_font_bold.ttf\");\n        }\n        return this.boldFont;\n    }\n}\n</pre>\n\n<p>\nThe <b>setTypeface</b> method will perform the check for bold text styling (again, you can apply this principle to italics as well), and apply the appropriate <b>Typeface</b> accordingly. In addition, rather than initialize the <b>Typeface</b> objects each time, it will only load it from the file system once, and keep it in memory from then on. This should provide a noticeable performance improvement if you are modifying the font of many <b>TextView</b> objects.\n</p>\n\n<p>\nNow from your <b>Activity</b> (or <b>Fragment</b>) you can apply the style like so:\n</p>\n\n<pre class=\"prettyprint\">\npublic class MyActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.my_layout);\n\n        MyApplication application = (MyApplication) getApplication();\n        TextView myTextView = (TextView) findViewById(R.id.my_textview);\n        application.setTypeface(myTextView);\n    }\n}\n</pre>\n\n<p>\nUse the <b>MyApplication#setTypeface</b> method for each <b>TextView</b> you want to style, and the appropriate font will be applied for you. \n</p>","date":"5/23/2013 00:01 AM","preview":"\nEveryone knows using the default font in an application can get a little boring. The new <b>Roboto</b> typeface in Android is all well and good, but it can leave something to be desired at times. Luckily, using a custom font is quite easy.\n","title":"Applying Custom TTF Fonts in an Android Application Using Typeface","url":"http://kylewbanks.com/blog/Applying-Custom-TTF-Fonts-in-an-Android-Application-Using-Typeface","author":"Kyle Banks","id":578,"tags":[]},{"body":"<p>\nSomething that I recently needed to add for the admin panel and home page of this site's redesign was to order posts by the number of views it has. I was actually quite surprised to find that Grails doesn't inject this functionality as part of it's standard <b>CRUD</b> functions on domain classes, such as <b>list</b> and <b>findByXAndY</b>.\n</p>\n\n<p>\nThe way my domain model works is very basic:\n</p>\n\n<pre class=\"prettyprint\">\nclass Post {\n    ...\n    static hasMany = [views: View]\n}\n\nclass View {\n    ...\n    static belongsTo = [post: Post]\n}\n</pre>\n\n<p>\nThe solution I came up with was to write a static method in the <b>Post</b> class that mimics the style of the injected <b>CRUD</b> methods. I want to statically invoke it and have it return a <b>List</b> of <b>Post</b> objects, sorted by the number of views it has. A simple <b>HQL</b> query should work just fine:\n</p>\n\n<pre class=\"prettyprint\">\nclass Post {\n    ...\n    static hasMany = [views: View]\n\n    static List<Post> orderByViewCount() {\n        return Post.executeQuery(\"\"\"\n            SELECT post\n            FROM Post post\n            ORDER BY size(post.views) DESC\n        \"\"\")\n    }\n}\n</pre>\n\n<p>\nThis works great, but I decided to also overload it to allow additional parameters - namely <b>max</b> and <b>sortOrder</b>.\n</p>\n\n<pre class=\"prettyprint\">\nclass Post {\n    ...\n    static hasMany = [views: View]\n\n    static List<Post> orderByViewCount() {\n        return this.orderByViewCount(Integer.MAX_VALUE, \"DESC\")\n    }\n\n    static List<Post> orderByViewCount(int max) {\n        return this.orderByViewCount(max, \"DESC\")\n    }\n\n    static List<Post> orderByViewCount(String sortOrder) {\n        return this.orderByViewCount(Integer.MAX_VALUE, sortOrder)\n    }\n\n    static List<Post> orderByViewCount(int max, String sortOrder) {\n        return Post.executeQuery(\"\"\"\n        \tSELECT post\n        \tFROM Post post\n        \tORDER BY size(post.views) ${sortOrder}\n    \t\t\"\"\", [max: max])\n    }\n}\n</pre>\n\n<p>\nThis gives the developer a little more flexibility when using this function by allowing them to limit the number of results, or change the sort order. Of course you could modify this to allow overloading of any parameters you want.\n</p>","date":"6/18/2013 00:01 AM","preview":"\nSomething that I recently needed to add for the admin panel and home page of this site's redesign was to order posts by the number of views it has. I was actually quite surprised to find that Grails doesn't inject this functionality as part of it's standard <b>CRUD</b> functions on domain classes, such as <b>list</b> and <b>findByXAndY</b>.\n","title":"Grails: Sort by hasMany Property Count","url":"http://kylewbanks.com/blog/Grails-Sort-by-hasMany-Property-Count","author":"Kyle Banks","id":1505,"tags":[]},{"body":"<p>Amazon recommends using a properties file to supply AWS credentials to your Java application, and while this is generally the most appropriate way to do it, what happens if you want to dynamically connect to different AWS accounts, or for whatever reason you need to provide the credentials in code?</p>\n\n<p>\nThe solution to this is to implement the <b>AWSCredentials</b> interface and override the <b>getAWSAccessKeyId()</b> and <b>getAWSSecretKey()</b> methods, like so:\n</p>\n\n<pre class=\"prettyprint\">\npublic class AWSCredentialProvider implements AWSCredentials {\n\n    @Override\n    public String getAWSAccessKeyId() {\n        return \"AWS-Access-Key\";\n    }\n\n    @Override\n    public String getAWSSecretKey() {\n        return \"AWS-Secret-Key\";\n    }\n\n}\n</pre>\n\n<p>\nBecause this is a Java class, you can obtain and return the keys however you like. When it comes time to create an AWS client, such as an <b>AmazonEC2Client</b> for example, you just pass an instance of <b>AWSCredentialProvider</b>:\n</p>\n\n<pre class=\"prettyprint\">\nAmazonEC2Client ec2Client = new AmazonEC2Client(new AWSCredentialProvider())\n</pre>","date":"6/27/2013 00:01 AM","preview":"Amazon recommends using a properties file to supply AWS credentials to your Java application, and while this is generally the most appropriate way to do it, what happens if you want to dynamically connect to different AWS accounts, or for whatever reason you need to provide the credentials in code?","title":"Creating a Basic AWS Credential Provider in Java","url":"http://kylewbanks.com/blog/Creating-a-Basic-AWS-Credential-Provider-in-Java","author":"Kyle Banks","id":2087,"tags":[]},{"body":"<p>\nSometimes you need to add or modify a <b>sequence</b> in PostgreSQL. Maybe you migrated your data from another engine, such as MySQL, and lost your primary-key sequence (Auto Increment in MySQL). Or maybe you simply need to modify the next value your sequence provides.\n</p>\n\n<p>\nLet's assume you just migrated your portfolio website from a MySQL database, and you have a table called <b>project</b>. The <b>project</b> table has a primary-key called <b>id</b> that you want to 'auto increment' each time a new project is added to the database. The following demonstrates how to create a sequence and use it to provide a new default value for <b>project.id</b> each time a new one is created:\n</p>\n\n<pre class='prettyprint'>\n-- Create a Sequence\nCREATE SEQUENCE project_id_seq;\n\n-- Use it to provide a new value for each project ID\nALTER TABLE project \nALTER id \nSET DEFAULT NEXTVAL('project_id_seq');\n</pre>\n\n<p>\nNow, each time a row is added to the project table, a new ID will be generated. Great, right? Well there's one more problem. If your project table already has rows in it, each row will already have an ID. Our new <b>project_id_seq</b> sequence is going to start at 1, which means there's a good chance the IDs are going to overlap at some point, and your unique constraint on the primary key will fail.\n</p>\n\n<p>\nLuckily, modifying the sequence to start at a value other than 1 is very straightforward:\n</p>\n\n<pre class=\"prettyprint\">\n-- Change the starting value of the sequence\nALTER SEQUENCE project_id_seq RESTART 3000;\n</pre>\n\n<p>\nSo now our sequence will restart with a value of 3000, and increment from there. However, the following demonstrates a more dynamic approach, where we can set the new value to be the highest ID in the table, plus one:\n</p>\n\n<pre class=\"prettyprint\">\n-- Similar to above, but more dynamic\nSELECT SETVAL('project_id_seq', (SELECT MAX(id) + 1 FROM project));\n</pre>\n\n<p>\nHere, we call the <b>SETVAL</b> function which is used under the hood in the <b>ALTER SEQUENCE</b> command above, and set the value to the max ID in the project table, plus one. So, for example, if the max ID in project is currently 275, the sequence would now start at 276.\n</p>","date":"12/10/2014 00:01 AM","preview":"Sometimes you need to add or modify a <b>sequence</b> in PostgreSQL. Maybe you migrated your data from another engine, such as MySQL, and lost your primary-key sequence (Auto Increment in MySQL). Or maybe you simply need to modify the next value your sequence provides.","title":"Adding or Modifying a PostgreSQL Sequence (Auto Increment)","url":"http://kylewbanks.com/blog/Adding-or-Modifying-a-PostgreSQL-Sequence-Auto-Increment","author":"Kyle Banks","id":3000,"tags":[]},{"body":"<p>\r\nSince Xcode 6, enterprise distribution has no longer generated the required P-List for distributing your iOS application. This tool handles generating it for you, and can be easily used as part of your Continuous Integration process when automating builds.\r\n</p>\r\n\r\n<p>The P-List generator is a <b>Bash</b> script that takes a few command-line arguments to populate a standard enterprise distribution .plist template.</p>\r\n\r\n<p>Check it out <a href=\"https://github.com/KyleBanks/iOS-Enterprise-Distribution-Plist-Generator\">on GitHub</a>, and enjoy!</p>","date":"12/12/2014 00:01 AM","preview":"Since Xcode 6, enterprise distribution has no longer generated the required P-List for distributing your iOS application. This tool handles generating it for you, and can be easily used as part of your Continuous Integration process when automating builds.","title":"Open Sourced: iOS Enterprise Distribution P-List Generator","url":"http://kylewbanks.com/blog/Open-Sourced-iOS-Enterprise-Distribution-P-List-Generator","author":"Kyle Banks","id":3001,"tags":[]},{"body":"<p>\r\nHere's a <a href='http://en.wikipedia.org/wiki/Monkey_patch'>monkey-patch</a> for JavaScript Array objects that allows an array of functions to be executed sequentially; that is, one after another. At the end a callback function is executed with an array of Errors (or null if there were none), and an array of responses, which can contain anything you wish.\r\n</p>\r\n\r\n<p>Let's take a look:</p>\r\n\r\n<pre class='prettyprint'>\r\n// Add the sequence function to the Array prototype\r\nArray.prototype.sequence = function(cb) { \r\n   var self = this;\r\n   var index = 0;\r\n   \r\n   var errors = [],\r\n       responses = [];\r\n      \r\n   // Recursively call _next until the index reaches the length of this Array\r\n   function _next(index) {\r\n      if (index < self.length) {\r\n         // There's a function to execute, run it...\r\n         self[index](function(err, res) {\r\n            if (err) \r\n               errors.push(err);\r\n            if (res) \r\n               responses.push(res);\r\n               \r\n            // Increment the index, and execute the next function\r\n            index ++;\r\n            _next(index);\r\n         });\r\n      } else {\r\n         // Reached the end of the array, execute the final callback\r\n         cb (errors.length > 0 ? errors : null, responses);\r\n      }\r\n   }\r\n   \r\n   // Start it off\r\n   _next(0);\r\n};\r\n</pre>\r\n\r\n<p>\r\nThe <b>sequence</b> function is pretty straightforward. First we call <b>_next</b> with an index of 0, in which we check if we have exceeded the length of the array. If so, we execute the final callback (passed to the sequence function). Otherwise, we execute the function at the current index, increment the index, and continue calling <b>_next</b> until we reach the end of the array.\r\n</p>\r\n\r\n<p>\r\nNow let's see it in action:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n[\r\n   function(next) {\r\n      console.log('Function 1');\r\n      setTimeout(function() {\r\n         console.log('... timeout complete.');\r\n         next(null, true);\r\n      }, 1000);\r\n   },\r\n   function(next) {\r\n      console.log('Function 2');\r\n      next(null, true);\r\n   },\r\n   function(next) {\r\n      console.log('Function 3');\r\n      next(new Error('Test Error'));\r\n   }\r\n].sequence(function(err, res) {\r\n   console.log(\"----------------------\");\r\n   console.log(\"Done With Results:\");\r\n   console.log(err);\r\n   console.log(res);\r\n});\r\n</pre>\r\n\r\n<p>\r\nFirst up, define an array of functions that you want to execute. Each function must take a callback (called <b>next</b> in the examples above), and execute it upon completion. The callback takes two arguments, the first being an Error (or null), the second being any response you want to pass to the final callback.\r\n</p>\r\n\r\n<p>\r\nSpeaking of the final callback, we now call <b>sequence</b> on the array, and give it a callback to execute when all of the functions in the array have finished executing. The final callback will receive two arguments, which are an array of Errors and an array of arbitrary responses, which is the collective sum of all the callbacks you executed in the array of functions. In the example above, the output would look like so:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\nFunction 1\r\n... timeout complete.\r\nFunction 2\r\nFunction 3\r\n----------------------\r\nDone With Results:\r\n[ [Error: Test Error] ]\r\n[ true, true ]\r\n</pre>\r\n\r\n<h3>Disclosure</h3>\r\n\r\n<p>\r\nMonkey-patches are a pretty hot topic: some developers avoid them like the plague, and others are all for them. I'm of the latter group, assuming you understand the implications of using them, and aren't just blindly copy-and-pasting all the patches you come across. They can be dangerous, and it's important to understand what the patch is doing before you add it to your codebase.\r\n</p>\r\n\r\n<p>\r\nIn addition, this is a pretty short and to-the-point implementation. It has worked for my needs, but may have pitfalls in certain use-cases. However, it should at the very least act as a good starting point, and can be easily customized to suit your needs.\r\n</p>","date":"12/12/2014 00:01 AM","preview":"Here's a monkey-patch for JavaScript Array objects that allows an array of functions to be executed sequentially; that is, one after another. At the end a callback function is executed with an array of Errors (or null if there were none), and an array of responses, which can contain anything you wish.","title":"JavaScript Array 'Monkey-Patch' to Execute Functions Sequentially","url":"http://kylewbanks.com/blog/JavaScript-Array-Monkey-Patch-to-Execute-Functions-Sequentially","author":"Kyle Banks","id":3002,"tags":[]},{"body":"<p>\r\nOften times when starting a project, I want a simple, cost-effective, and custom tailored system for tracking user events. In order to solve that problem, I created <a href=\"https://github.com/KyleBanks/metroid\">Metroid</a>.\r\n</p>\r\n\r\n<p>\r\nDuring the early days, weeks and even months of a project, when it's still mostly a prototype and you're looking to keep costs low, analytics are still crucial. I personally prefer not to pay monthly subscription fees for massive analytics platforms that I simply won't fully utilize, at least not until the project grows and matures. I'd prefer to keep costs low, and run an in-house, customizable analytics system that I can pop into any (Node.js) project, and start using in under 1 minute of setup time.\r\n</p>\r\n\r\n<p>\r\nAfter writing such a system for a couple of projects, I decided to pool all the common components together into what is now <a href=\"https://github.com/KyleBanks/metroid\">Metroid</a>.\r\n</p>\r\n\r\n<p>\r\nUsage is simple, you only pay for the <a href=\"https://aws.amazon.com/dynamodb/pricing/\">DynamoDB database</a> <i>(new project + free tier = FREE)</i>, and the system is flexible and robust enough to suit the basic needs of just about any prototype I've ever thrown at it.\r\n</p>\r\n\r\n<p>\r\n<a href=\"https://github.com/KyleBanks/metroid\">Metroid is available on GitHub</a> and can be installed via npm.\r\n</p>\r\n\r\n<p>\r\nCheck it out, let me know if you use it, and feel free to submit a pull request if you have an idea on how to improve the project.\r\n</p>","date":"8/24/2015 00:01 AM","preview":"Often times when starting a project, I want a simple, cost-effective, and custom tailored system for tracking user events. In order to solve that problem, I created Metroid.","title":"Introducing Metroid: A Real-Time Analytics Tracker for Node.js and DynamoDB","url":"http://kylewbanks.com/blog/Introducing-Metroid-A-Real-Time-Analytics-Tracker-for-Node-js-and-DynamoDB","author":"Kyle Banks","id":3003,"tags":[]},{"body":"<p>\r\nA pretty standard setup these days is to have an application deployed on any number of <a href=\"https://aws.amazon.com/ec2/\">EC2</a> instances in an <a href=\"https://aws.amazon.com/autoscaling/\">Auto Scaling</a> Group, behind an <a href=\"https://aws.amazon.com/elasticloadbalancing/\">Elastic Load Balancer</a> (ELB). The trouble is, how do you redeploy the application, with zero downtime, across the entire fleet of instances? In addition, how can we do this while maintaining the current number of healthy instances?\r\n</p>\r\n\r\n<p>\r\n<i><b>Note:</b> I recommend reading <a href=\"http://kylewbanks.com/blog/Building-and-Deploying-Self-Managed-Applications-with-Amazon-Web-Services\">Building and Deploying Self-Managed Applications with Amazon Web Services</a> first if your application is not setup for deploying itself.</i>\r\n</p>\r\n\r\n<p>\r\nDepending on your setup, the answer is actually pretty simple. The basic premise is to:\r\n</p>\r\n\r\n<ol>\r\n    <li>Launch an entire fleet of new instances (the same number as are currently running) that can <a href=\"http://kylewbanks.com/blog/Building-and-Deploying-Self-Managed-Applications-with-Amazon-Web-Services\">manage updating source code and running the application themselves</a> via an <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\">User Data</a> script</li>\r\n    <li>Wait for the new instances to come online and become healthy in the ELB</li>\r\n    <li>Terminate the old instances</li>\r\n</ol>\r\n\r\n<h3>Setup</h3>\r\n\r\n<p>\r\nWith the <a href=\"https://aws.amazon.com/cli/\">AWS CLI</a> installed and <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html\">configured</a> we can write a simple script that does just that, with two prerequisites.\r\n</p>\r\n\r\n<p>\r\nFirst, we'll need to add a <a href=\"http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/policy_creating.html#policy-creating-asg-console\">Scaling Policy</a> that simply adds 1 instance with no alarm, in addition to any existing Scaling Policies that you currently have. The configured scaling policy should look like so: \r\n</p>\r\n\r\n<img src=\"https://s3.amazonaws.com/kylewbanks/scaling_policy_launch_1.png\" alt=\"Scaling Policy: Launch 1 Instance\" />\r\n\r\n<p>\r\nSecond, we need to tell the Auto Scaling group that when it terminates instances, it should terminated the oldest instances first. We do this by setting the <a href=\"http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/AutoScalingBehavior.InstanceTermination.html\">Termination Policy</a> to <b>OldestInstance</b>. The reason for this will become apparent shortly.\r\n</p>\r\n\r\n<p>\r\nWith our new Scaling Policy, an OldestFirst Termination Policy, and the ability to simply launch an instance and it manage updating source code, setting itself up, and running the application, we're ready to get started.\r\n</p>\r\n\r\n<p>\r\nThere are 3 variables we're going to need to collect prior to running the script.\r\n</p>\r\n\r\n<ol>\r\n    <li>The name of the Auto Scaling group (ex. \"API Server AG\")</li>\r\n    <li>The name of the Scaling Policy we created above (ex. \"Launch 1 Instance\")</li>\r\n    <li>The name of the ELB (ex. \"api.example.com ELB\")</li>\r\n</ol>\r\n\r\n<h3>The Script</h3>\r\n\r\n<p><i><b>Note:</b> This script is available on <a href=\"https://github.com/KyleBanks/DeployAutoScalingGroup\">GitHub</a> and may be more up-to-date there.</i></p>\r\n\r\n<p>\r\nWith these variables defined, we're ready to go. Let's have a look at the script:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n# Define some global variables\r\nexport AUTO_SCALING_GROUP_NAME=\"API Server AG\"\r\nexport SCALING_POLICY=\"Launch 1 Instance\"\r\nexport ELB_NAME=\"api.example.com ELB\"\r\n\r\n# Returns the number of instances currently in the AutoScaling group\r\nfunction getNumInstancesInAutoScalingGroup() {\r\n    local num=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name \"$AUTO_SCALING_GROUP_NAME\" --query \"length(AutoScalingGroups[0].Instances)\")    \r\n    local __resultvar=$1\r\n    eval $__resultvar=$num\r\n}\r\n\r\n# Returns the number of healthy instances currently in the ELB\r\nfunction getNumHealthyInstancesInELB() {\r\n    local num=$(aws elb describe-instance-health --load-balancer-name \"$ELB_NAME\" --query \"length(InstanceStates[?State=='InService'])\")\r\n    local __resultvar=$1\r\n    eval $__resultvar=$num\r\n}\r\n\r\n# Get the current number of desired instances to reset later\r\nexport existingNumDesiredInstances=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name \"$AUTO_SCALING_GROUP_NAME\" --query \"AutoScalingGroups[0].DesiredCapacity\")\r\n\r\n# Determine the number of instances we expect to have online\r\ngetNumInstancesInAutoScalingGroup numInstances\r\nnumInstancesExpected=$(expr $numInstances \\* 2)\r\necho \"Expecting to have $numInstancesExpected instance(s) online.\"\r\n\r\necho \"Will launch $numInstances Instance(s)...\"\r\nfor i in `seq 1 $numInstances`;\r\ndo\r\n    echo \"Launching instance...\"\r\n    aws autoscaling execute-policy --no-honor-cooldown --auto-scaling-group-name \"$AUTO_SCALING_GROUP_NAME\" --policy-name \"$SCALING_POLICY\"\r\n    sleep 5s\r\ndone\r\n\r\n# Wait for the number of instances to increase\r\ngetNumInstancesInAutoScalingGroup newNumInstances\r\nuntil [[ \"$newNumInstances\" == \"$numInstancesExpected\" ]]; \r\ndo\r\n    echo \"Only $newNumInstances instance(s) online in $AUTO_SCALING_GROUP_NAME, waiting for $numInstancesExpected...\"\r\n    sleep 10s\r\n    getNumInstancesInAutoScalingGroup newNumInstances\r\ndone\r\n\r\n# Wait for the ELB to determine the instances are healthy\r\necho \"All instances online, waiting for the Load Balancer to put them In Service...\"\r\ngetNumHealthyInstancesInELB numHealthyInstances\r\nuntil [[ \"$numHealthyInstances\" == \"$numInstancesExpected\" ]];\r\ndo\r\n    echo \"Only $numHealthyInstances instance(s) In Service in $ELB_NAME, waiting for $numInstancesExpected...\"\r\n    sleep 10s\r\n    getNumHealthyInstancesInELB numHealthyInstances\r\ndone\r\n\r\n# Update the desired capacity back to it's previous value\r\necho \"Resetting Desired Instances to $existingNumDesiredInstances\"\r\naws autoscaling update-auto-scaling-group --auto-scaling-group-name \"$AUTO_SCALING_GROUP_NAME\" --desired-capacity $existingNumDesiredInstances\r\n\r\n# Success!\r\necho \"Deployment complete!\"\r\n</pre>\r\n\r\n<p>\r\nSo what's going on here? Essentially, we start by determining the current number of desired instances configured on the Auto Scaling group. The reason for this is that when we execute the Scaling Policy, it's going to increment the number of desired instances by 1 each time, which we don't want. So, we fetch the existing number so that we can reset it later on.\r\n</p>\r\n\r\n<p>\r\nNext up, we determine how many instances are currently running in the Auto Scaling group, and multiply it by two. This is the total number of instances we should have healthy once the new instances launch, and before we terminate the old instances. After that, we run a loop that executes the Scaling Policy each time in order to launch the same number of instances that are currently running.\r\n</p>\r\n\r\n<p>\r\nAfter that, we wait for the instances to come online in the Auto Scaling group, and then we wait for them to become healthy in the ELB. At this point, we have double the number of instances we need. Half of them are old, half of them are new. \r\n</p>\r\n\r\n<p>\r\nNow that all of our instances are online and healthy, it's time to terminate the old ones. Remember how we kept track of the original number of desired instances so we can reset that later on? Well, that actually doubles as our means of terminating the old ones. When we reset the number of desired instances, the Auto Scaling group is going to notice we have double the amount we need, and begin terminating them. Because we configured the Auto Scaling group to kill the oldest instances first, the old instances are going to be the ones that are terminated.\r\n</p>\r\n\r\n<p>\r\nAnd that's it! Our entire fleet has been redeployed, we have the same number of instances are we did prior to deploying, and there was zero downtime. \r\n</p>\r\n\r\n<h3>Room to Improve</h3>\r\n\r\n<p>\r\nDeployment strategies are very unique to each developer/company and each application. This strategy may not work for everyone and that's perfectly fine. Hopefully if you cannot use the script exactly as it is, it can serve as a starting point for you.\r\n</p>\r\n\r\n<p>The script is available on <a href=\"https://github.com/KyleBanks/DeployAutoScalingGroup\">GitHub</a> and can certainly be improved upon. If I have time I'd like to remove the dependencies on the Scaling Policy and the Termination Policy, or if you have a potential improvement, please don't hesitate to submit a pull-request.</p>","date":"8/26/2015 00:01 AM","preview":"<p>\r\nA pretty standard setup these days is to have an application deployed on any number of EC2 instances in an Auto Scaling Group, behind an Elastic Load Balancer (ELB). The trouble is, how do you redeploy the application, with zero downtime, across the entire fleet of instances? In addition, how can we do this while maintaining the current number of healthy instances? Depending on your setup, the answer is actually pretty simple.\r\n</p>","title":"Redeploying an Application in an AWS Auto Scaling Group, Behind an ELB, with Zero Downtime","url":"http://kylewbanks.com/blog/Redeploying-an-Application-in-an-AWS-Auto-Scaling-Group-Behind-an-ELB-with-Zero-Downtime","author":"Kyle Banks","id":3004,"tags":[]},{"body":"<p>\r\nWhen you're talking about auto scaling your applications, automating everything is key. That includes updating your source code, installing dependencies, starting your web server, etc. In this post, I'm going to walk you through setting up a <a href=\"http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/WorkingWithLaunchConfig.html\">Launch Configuration</a> for your <a href=\"https://aws.amazon.com/autoscaling/\">Auto Scaling Group</a> that does just that. \r\n</p>\r\n\r\n<p><i><b>Note:</b> This example assumes we're deploying a Node.js application, but the idea is pretty much the same regardless of your platform.</i></p>\r\n\r\n <p><i><b>Note 2:</b> It is also assumed that you have at least a decent understanding of Launch Configurations, Auto Scaling Groups, and EC2 in general.</i></p>\r\n\r\n<h3>Launch Configuration</h3>\r\n\r\n<p>\r\nFirst, we're going to need an <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html\">AMI</a> with Git, Node.js, and npm installed.\r\n</p>\r\n\r\n<p>\r\nNext, create a Launch Configuration with your new AMI, and add the following <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\">User Data</a> script:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\n# 1\r\nsudo su - ec2-user\r\n\r\n# 2\r\nexport HOME=\"/home/ec2-user\"\r\nexport BRANCH=\"release-1.2.3\"\r\nexport REPOSITORY_URL=\"https://github.com/Example/SweetNodeApp\"\r\n\r\n# Add any other environment variables you'll need\r\nexport NODE_ENV=\"prod\"\r\n\r\n# 3\r\ngit clone -b $BRANCH $REPOSITORY_URL app-dir\r\n\r\n# 4\r\ncd $HOME/app-dir\r\n./start.sh\r\n</pre>\r\n\r\n<p>\r\nA little explanation of what's going on here:\r\n</p>\r\n\r\n<ol>\r\n    <li>User Data scripts actually run as <b>root</b>, so we switch to <b>ec2-user</b> before running anything.</li>\r\n    <li>Setting some environment variables we'll need both in this script and in the script we're going to be running later. Replace <b>BRANCH</b> and <b>REPOSITORY_URL</b> with the appropriate values.</li>\r\n    <li>Next up, clone the correct branch of your Git repository into a new <b>app-dir</b> folder.</li>\r\n    <li>Finally, run the script that we're going to be putting in the Git repository. Be sure that the name of this script matches what you create below and has execute permissions.</li>\r\n</ol>\r\n\r\n<p>\r\nWith our User Data set, and the Launch Configuration created, it's time to add the deployment script.\r\n</p>\r\n\r\n<h3>Deployment Script</h3>\r\n\r\n<p>\r\nOur second and final script is going to do any final setup, such as installing dependencies and running the web server. The benefit to this script, and the reason we don't put everything in User Data, is that User Data cannot be editted. Any time you need to change it, you need to create a new Launch Configuration. This script, since it's in Git, will be automatically refreshed each time an instance is deployed, and thus can be modified as much as you need. Ideally, the User Data script is kept as minimal as absolutely possible and the majority of your setup goes in here. Let's have a look at a basic example:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\n# Debug Logging\r\necho \"Starting App with\"\r\necho \"node.js version:\"\r\nnode -v\r\necho \"npm version:\"\r\nnpm -v\r\n\r\n# Install dependencies\r\nnpm install\r\n\r\n# Start the application\r\nnpm start\r\n</pre>\r\n\r\n<p>\r\nOur simple example actually does very little. First, a little debug logging, followed by installing dependencies, and finally starting the application. There's not a lot to do here, but the beauty is that because this script can be modified at any time, it can really do absolutely anything you need it to.\r\n</p>","date":"8/26/2015 00:01 AM","preview":"When you're talking about auto scaling your applications, automating everything is key. That includes updating your source code, installing dependencies, starting your web server, etc. In this post, I'm going to walk you through setting up a Launch Configuration for your Auto Scaling Group that does just that. ","title":"Building and Deploying Self-Managed Applications with Amazon Web Services","url":"http://kylewbanks.com/blog/Building-and-Deploying-Self-Managed-Applications-with-Amazon-Web-Services","author":"Kyle Banks","id":3005,"tags":[]},{"body":"<p>\r\n<a href=\"https://github.com/KyleBanks/lambda-uploader\">lambda-uploader</a> is a Node.js module for uploading a source directory to <a href=\"https://github.com/KyleBanks/lambda-uploader\">AWS Lambda</a> as a function.\r\n</p>\r\n\r\n<h3>Installation</h3>\r\n\r\n<pre class=\"prettyprint\">\r\nnpm install lambda-uploader\r\n</pre>\r\n\r\n<h3>Usage</h3>\r\n\r\nAssuming you have a folder called <i>/path/to/lambda-function</i> that contains the source code and dependencies of a Lambda function:\r\n\r\n<pre class=\"prettyprint\">\r\nvar lambdaUploader = require('lambda-uploader');\r\n\r\nlambdaUploader.uploadFunction(\r\n\r\n    'us-east-1', // Region\r\n    'my-awesome-function', // Function Name\r\n    '/path/to/lambda-function', // Lambda Function Source Directory\r\n    'index.handler', // Handler Name\r\n    '&lt;Lambda Execution Role ARN&gt;', \r\n    512, // Memory in Megabytes\r\n    30, // Timeout in Seconds\r\n\r\n    function(err) {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n\r\n        console.log(\"Lambda function uploaded!\");\r\n    }\r\n);\r\n</pre>\r\n\r\n<h3>Source Code</h3>\r\n<p>\r\nAs always, the source code is available on <a href=\"https://github.com/KyleBanks/lambda-uploader\">GitHub</a> and contributions are more than welcome.\r\n</p>","date":"8/26/2015 00:01 AM","preview":"<b>lambda-uploader</b> is a Node.js module for uploading a source directory to AWS Lambda as a function.","title":"Introducing lambda-uploader, A Module for Uploading an AWS Lambda Function from Node.js","url":"http://kylewbanks.com/blog/Introducing-lambda-uploader-A-Module-for-Uploading-an-AWS-Lambda-Function-from-Node-js","author":"Kyle Banks","id":3006,"tags":[]},{"body":"<p>\r\n<a href=\"https://github.com/KyleBanks/IconEditText\">IconEditText</a> provides a reusable view for displaying an ImageView with an EditText for Android 4.0+.\r\n</p>\r\n\r\n<p><i><b>Note:</b> For more up-to-date documentation, check <a href=\"https://github.com/KyleBanks/IconEditText\">GitHub</a>.</i></p>\r\n\r\n<img src=\"https://s3.amazonaws.com/kylewbanks/IconEditText/example.png\" width=\"600\"/>\r\n\r\n<h3>Usage</h3>\r\n\r\n<p>Using the <b>IconEditText</b> is easy enough, just clone the <a href=\"https://github.com/KyleBanks/IconEditText\">repo</a> and <a href=\"https://www.google.ca/search?q=android+studio+add+library\">add it to your project as a Library</a>.</p>\r\n\r\n<p>After adding the library, you can add an <b>IconEditText</b> like so:</p>\r\n\r\n<h4>XML</h4>\r\n<pre class=\"prettyprint\">\r\n&lt;!-- Note the declaration of the `widget` namespace. --&gt;\r\n&lt;LinearLayout \r\n  ...\r\n  xmlns:widget=\"http://schemas.android.com/apk/res-auto\"&gt;\r\n\r\n  &lt;com.kylewbanks.android.iconedittext.IconEditText\r\n      android:layout_width=\"match_parent\"\r\n      android:layout_height=\"wrap_content\"\r\n      widget:isPassword=\"false\"\r\n      widget:hint=\"@string/username\"\r\n      widget:iconSrc=\"@drawable/username_icon\" /&gt;\r\n\r\n&lt;/LinearLayout&gt;\r\n</pre>\r\n\r\n<h4>Options</h4>\r\n\r\n<p>The <b>IconEditText</b> currently supports the following properties:</p>\r\n\r\n<ul>\r\n<li>isPassword <b>{Boolean}</b>: If true, will mask the EditText's input.</li>\r\n<li>hint <b>{String}</b>: The hint text to display, if any.</li>\r\n<li>iconSrc <b>{Drawable}</b>: The source of the icon image to display.</li>\r\n</ul>\r\n\r\n<h3>Java</h3>\r\n\r\n<p>From Java, you can reference the <b>IconEditText</b> like any other view. For example, from an <b>Activity</b>:</p>\r\n\r\n<pre class=\"prettyprint\">\r\nIconEditText iconEditText = (IconEditText) findViewById(...);\r\n</pre>\r\n\r\n<p>You can access the underlying <b>EditText</b> and <b>ImageView</b> like so:</p>\r\n\r\n<pre class=\"prettyprint\">\r\nEditText editText = iconEditText.getEditText();\r\nImageView imageView = iconEditText.getImageView();\r\n</pre>\r\n\r\n<p>There is also a convenience method for accessing the <b>EditText</b>'s <b>Editable</b>:</p>\r\n\r\n<pre class=\"prettyprint\">\r\nEditable editable = iconEditText.getText();\r\n</pre>\r\n\r\n<h3>Contributing</h3>\r\n<p>\r\nContributions are always welcome, so don't hesitate to head over to <a href=\"https://github.com/KyleBanks/IconEditText\">GitHub</a> and submit a pull-request.\r\n</p>","date":"9/5/2015 00:01 AM","preview":"IconEditText provides a reusable view for displaying an ImageView with an EditText for Android 4.0+.","title":"Open Sourced: IconEditText for Android","url":"http://kylewbanks.com/blog/Open-Sourced-IconEditText-for-Android","author":"Kyle Banks","id":3007,"tags":[]},{"body":"<p>Dockerton wraps the core functionality of Docker into an easy-to-use Node.js library. With Dockerton, you can generate Dockerfiles, build images, and run containers using a simple and intuitive JavaScript interface.</p>\r\n\r\n<p>Check out <a href='https://github.com/KyleBanks/dockerton'>Dockerton on Github</a>.","date":"11/21/2015 00:01 AM","preview":"Dockerton wraps the core functionality of Docker into an easy-to-use Node.js library. With Dockerton, you can generate Dockerfiles, build images, and run containers using a simple and intuitive JavaScript interface.","title":"Open Sourced: Dockerton, a Docker wrapper for Node.js","url":"http://kylewbanks.com/blog/Open-Sourced-Dockerton-Docker-Wrapper-for-Nodejs","author":"Kyle Banks","id":3008,"tags":[]},{"body":"<p>Today I open sourced Dockerton, a Node.js wrapper library for Docker. In this post, I'll show you how you can generate a Dockerfile, build an image, and run containers from an easy-to-use JavaScript interface.</p>\r\n\r\n<p>First up, if you want to check out the source, <a href=\"https://github.com/KyleBanks/dockerton\">head over to GitHub</a>.</p>\r\n\r\n<p>\r\nInstallation is easy, simply install via npm and you're good to go:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">npm install --save dockerton</pre>\r\n\r\n<p>\r\nNext, we'll require Dockerton and create an instance:\r\n</p>\r\n\r\n<pre class='prettyprint'>\r\nvar Dockerton = require('dockerton');\r\n\r\nvar dockerton = new Dockerton('dockerton-tutorial')\r\n    .from('docker/whalesay', 'latest')\r\n    .run('apt-get -y update && apt-get install -y fortunes')\r\n    .cmd('/usr/games/fortune -a | cowsay');\r\n</pre>\r\n\r\n<p>\r\nAs you can see, we're going to be recreating the <a href=\"https://docs.docker.com/mac/step_three/\">Whalesay</a> example from the Docker website.\r\n</p>\r\n\r\n<p>\r\nNow that we've constructed an instance of Dockerton and issued our commands, we can generate a Dockerfile.\r\n</p>\r\n\r\n<pre class='prettyprint'>\r\ndockerton.dockerfile()\r\n    .then(function(contents) {\r\n        console.log(\"Generated Dockerfile:\");     \r\n        console.log(contents);\r\n    });\r\n</pre>\r\n\r\n<p>\r\nRunning the code as-is, you should see the following output:\r\n</p>\r\n\r\n<pre class='prettyprint'>\r\nGenerated Dockerfile:\r\nFROM docker/whalesay:latest\r\nRUN apt-get -y update && apt-get install -y fortunes\r\nCMD /usr/games/fortune -a | cowsay\r\n</pre>\r\n\r\n<p>\r\nNow that we've generated a Dockerfile, we are all set to build and run an image:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\ndockerton.dockerfile()\r\n    .then(function(contents) {\r\n        console.log(\"Generated Dockerfile:\");     \r\n        console.log(contents);\r\n\r\n        return dockerton.buildImage();\r\n    })\r\n    .then(function(imageDetails) {\r\n        return dockerton.runImage();\r\n    });\r\n</pre>\r\n\r\n<p>\r\nGo ahead and run the program again and you should see output similar to:\r\n</p>\r\n\r\n<pre class='prettyprint'>\r\n _______________________________________ \r\n/ The reasonable man adapts himself to  \\\r\n| the world; the unreasonable one       |\r\n| persists in trying to adapt the world |\r\n| to himself. Therefore all progress    |\r\n| depends on the unreasonable man.      |\r\n|                                       |\r\n\\ -- George Bernard Shaw                /\r\n --------------------------------------- \r\n    \\\r\n     \\\r\n      \\     \r\n                    ##        .            \r\n              ## ## ##       ==            \r\n           ## ## ## ##      ===            \r\n       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===        \r\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   \r\n       \\______ o          __/            \r\n        \\    \\        __/             \r\n          \\____\\______/   \r\n</pre>\r\n\r\n<p>\r\nDon't worry if your output doesn't match exactly, we use the <i>fortunes</i> program to randomize what the whale says.\r\n</p>\r\n\r\n<p>\r\nAnd here's the full example:\r\n</p>\r\n\r\n<pre class='prettyprint'>\r\nvar Dockerton = require('dockerton');\r\n\r\nvar dockerton = new Dockerton('dockerton-tutorial')\r\n    .from('docker/whalesay', 'latest')\r\n    .run('apt-get -y update && apt-get install -y fortunes')\r\n    .cmd('/usr/games/fortune -a | cowsay');\r\n\r\ndockerton.dockerfile()\r\n    .then(function(contents) {\r\n        console.log(\"Generated Dockerfile:\");     \r\n        console.log(contents);\r\n\r\n        return dockerton.buildImage();\r\n    })\r\n    .then(function(imageDetails) {\r\n        return dockerton.runImage();\r\n    });\r\n</pre>\r\n\r\n<p>\r\nPretty simple right? Dockerton supports all Dockerfile commands, as well as command-line arguments and more. Head over to <a href=\"https://github.com/KyleBanks/dockerton\">GitHub</a> for the full documentation, and for more examples.\r\n</p>","date":"11/21/2015 00:01 AM","preview":"Today I open sourced Dockerton, a Node.js wrapper library for Docker. See how you can generate a Dockerfile, build an image, and run containers from an easy-to-use JavaScript interface.","title":"Building and Running Docker Containers from Node.js via Dockerton","url":"http://kylewbanks.com/blog/Building-and-Running-Docker-Containers-from-Nodejs","author":"Kyle Banks","id":3009,"tags":[]},{"body":"<p>\r\nThe last few years have been incredible. From getting married to buying a house, not to mention personal and professional growth, it's been pretty crazy. But there's no reason to slow down now.\r\n</p>\r\n\r\n<p>\r\nLast year I resolved to do three things, and I'm happy to say that I succeeded in all three to varying degrees:\r\n</p>\r\n\r\n<ol style=\"padding-left: 1em;\">\r\n<li><b>Buy a house:</b> success</li>\r\n<li><b>Quit smoking:</b> so close, had three nights in November that ruined the streak</li>\r\n<li><b>Read more:</b> success, although I still plan to improve</li>\r\n</ol>\r\n\r\n<p>\r\nLast year was pretty good, but this year I've decided to step it up a notch and document 12 New Year's resolutions that I aim to accomplish throughout the year. The idea was to try and knock off one resolution per month, but many of the resolutions turned out to be year-long goals, so that may not work. I plan to come back and update this list as the year progresses, and link to evidence of the accomplishments. Anyhow, on to the goals.\r\n</p>\r\n\r\n<h3>Learn to Play the Drums</h3>\r\n<p>\r\nMy biggest and most exciting resolution this year is to learn to play the drums. I've been searching for a creative hobby that is unrelated to programming for some time, but I always end up going back to writing code. I thoroughly love coding, but I want something else for when I'm burnt out or just in need of a break.\r\n</p>\r\n\r\n<p>\r\nAs a kid I played guitar and bass, but I always wanted to play the drums, which my parents would consistently say no to. Recently I was joking with my wife that I had realized that there's nothing stopping me from buying a drum kit anymore, so that evening on the way home from work I went and bought an electric drum kit. I chose electric to keep costs down, and to avoid angering our neighbours. With an electric kit, I can whale on the bass drum until 3 in the morning and no one can here it but me. I'm planning to start taking lessons in the evenings soon, and I'll probably pick up a real kit before long as well.\r\n</p>\r\n\r\n<h3>Take the Jeep Off-Roading</h3>\r\n<p>\r\nThis is something that's been on my bucket list for a while now, and I plan to cross it off this spring. Living in Ontario and owning a Jeep means there is absolutely no reason not to try off-roading, so this is an easy one.\r\n</p>\r\n\r\n<h3>Meet Insane Work Deadline</h3>\r\n<p>\r\nFor the past 6 months or so, we've been working like crazy to meet a deadline that's coming up, and we've made great progress, but there is still so much left to do. The next couple of months are going to involve very late nights and long weeks, but this resolution is really a do-or-die one, it has to be done.\r\n</p>\r\n\r\n<h3>165 lbs, 6% Body Fat</h3>\r\n<p>\r\nThis year at my peak conditioning, I was 158 lbs and 6% body fat. I stand at about 5 feet, 10 inches so I had a decent frame at that weight and at such a low body fat percentage, but the goal is to keep putting on muscle and keep the body fat low. I chose not to go lower than 6% because it will be extremely hard to even keep the body fat that low while gaining 7 lbs of muscle.\r\n</p>\r\n\r\n<h3>Pay Off Credit Cards & Max RRSPs</h3>\r\n<p>\r\nFor the first time in my life I've carried a (little) credit card debt since buying and furnishing our home. I plan to get rid of that in the coming weeks and then work on maxing out my annual RRSP contribution limit, as usual. This resolution is really more about continuing good habits that I'm already doing, but it's a resolution none the less.\r\n</p>\r\n\r\n<h3>1 Week of Pescatarianism</h3>\r\n<p>\r\nMy wife is a pescatarian, meaning she eats fish but no meat, and she's had this dietary restriction for years, even predating our relationship. So, since she will be learning how to write code this year, I'm going to learn how to eat like she does. I have very strict caloric/macro-nutrient requirements, so I'll need to plan this out in advance to ensure I hit my numbers each day.\r\n</p>\r\n\r\n<h3>Watch Less TV</h3>\r\n<p>\r\nMy wife and I love binge watching Netflix, so this is going to be a tough one. \r\n</p>\r\n\r\n<h3>Read Two Books per Month</h3>\r\n<p>\r\nI exceeded this pace with my resolution last year for the first three months, reading about 4 or 5 books a month, but I just couldn't sustain that and I ended up burning out and not reading at all for a good chunk of the year. I think two books per month will be sufficient to read everything I want to, while not having to force myself to keep reading and end up getting sick of it.\r\n</p>\r\n\r\n<h3>Go from Half to Full Sleeve</h3>\r\n<p>\r\nI suppose this isn't really a resolution, and this has been underway for a long time, but I decided to put this here because it's technically not done yet. The planning and art for the second half of my arm is underway, and I should be starting on actual tattoo sessions in February. The upper half of my arm took about 12-15 hours, so I expect the lower half to be around 8-10 to finish it off. Should be done by late February or sometime in March.\r\n</p>\r\n\r\n<h3>Write 12 Blog Posts</h3>\r\n<p>\r\nI tend to go through phases with blogging where I write a few posts in one week, and then nothing for a few months. This year I want to be more consistent with it, and write one post per month.\r\n</p>\r\n\r\n<h3>Heal Nagging Back Injury</h3>\r\n<p>\r\nSince about May of this year I've been healing a lower-back and hip injury, but it just doesn't seem to want to go away. For about 6 months this year I couldn't do squats, and I still can't deadlift. My squat went from about 325lbs to barely being able to do 135lbs without pain, and who knows how far my 395lb deadlift has fallen.\r\n</p>\r\n\r\n<h3>No Products Tested on Animals</h3>\r\n<p>\r\nI want to stop using any and all shampoos, soaps, gels, etc. that are tested on animals. \r\n</p>\r\n","date":"1/1/2016 00:01 AM","preview":"Last year was pretty good, but this year I've decided to step it up a notch and document 12 New Year's resolutions that I aim to accomplish throughout the year","title":"2016 New Year's Resolutions","url":"http://kylewbanks.com/blog/2016-New-Years-Resolutions","author":"Kyle Banks","id":3010,"tags":[]},{"body":"<p>\r\nThe Android <a href=\"http://developer.android.com/reference/android/widget/TextView.html\">TextView</a> supports displaying a drawable beside, above, or below the text, but how do you programatically change the color of the drawable to match the text? Turns out it's actually really easy using a <a href=\"http://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html\">PorterDuffColorFilter</a>, but a little obscured behind some silly documentation. \r\n</p>\r\n\r\n<p>\r\nThere's a great explanation of the <b>PorterDuffColorFilter</b> over at <a href=\"https://softwyer.wordpress.com/2012/01/21/1009/\">Softwyer</a>, but for our purposes we only care about the <b>SRC_IN</b> PorterDuff Mode.\r\n</p>\r\n\r\n<p>\r\nWhat we'll do is iterate over the drawables of a <b>TextView</b> and apply the filter to each:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        TextView txt = (TextView) findViewById(R.id.my_textview);\r\n        setTextViewDrawableColor(txt, R.color.my_color);\r\n    }\r\n\r\n    private void setTextViewDrawableColor(TextView textView, int color) {\r\n        for (Drawable drawable : textView.getCompoundDrawables()) {\r\n            if (drawable != null) {\r\n                drawable.setColorFilter(new PorterDuffColorFilter(getColor(color), PorterDuff.Mode.SRC_IN));\r\n            }\r\n        }\r\n    }\r\n</pre>\r\n\r\n<p>\r\nAnd there you have it, a very simple method to apply a color filter to a TextView's drawable.\r\n</p>","date":"2/15/2016 00:01 AM","preview":"The Android TextView supports displaying a drawable beside, above, or below the text, but how do you programatically change the color of the drawable to match the text? Turns out it's actually really easy using a PorterDuffColorFilter, but a little obscured behind some silly documentation. ","title":"Setting the Color of a TextView Drawable for Android","url":"http://kylewbanks.com/blog/Setting-the-Color-of-a-TextView-Drawable-for-Android","author":"Kyle Banks","id":3011,"tags":[]},{"body":"<p>\r\n<a href=\"https://blog.golang.org/go-slices-usage-and-internals\">Slices</a> in Go are quite nice to work worth, but the standard library doesn't provide any way of creating a unique slice. \r\n</p>\r\n\r\n<p>\r\nSince this is such a common requirement, the community has come up with a few tricks to accomplish this, and I figured I'd share the one that is the most common, and perhaps simplest to write. \r\n</p>\r\n\r\n<p>\r\nGiven a sample slice of integers like the following, how can we create a subset of the slice that contains only unique entries:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\nintegers := []int{1, 2, 3, 3, 4, 5} // We want: []int{1, 2, 3, 4, 5}\r\n</pre>\r\n\r\n<p>\r\nThe answer is actually quite simple, but requires the use of a map, which may not seem intuitive at first. Since maps, by definition, can only have unique keys, we can leverage this fact to create our unique slice:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npackage unique\r\n\r\n// Ints returns a unique subset of the int slice provided.\r\nfunc Ints(input []int) []int {\r\n\tu := make([]int, 0, len(input))\r\n\tm := make(map[int]bool)\r\n\r\n\tfor _, val := range input {\r\n\t\tif _, ok := m[val]; !ok {\r\n\t\t\tm[val] = true\r\n\t\t\tu = append(u, val)\r\n\t\t}\r\n\t}\r\n\r\n\treturn u\r\n}\r\n</pre>\r\n\r\n<p>\r\nFirst up, we create a new slice <b>u</b> that will be our unique slice. We initialize it using the <b>make</b> function, with a length of zero and a capacity equal to the length of the input slice. Next we create a new map, again using the <b>make</b> function, where the key will be an integer (the type of slice we're dealing with) and the value will be a boolean. The value here doesn't actually matter, since we don't actually care about any values we're going to store in the map, we're only concerned with the keys.\r\n</p>\r\n\r\n<p>\r\nNext we iterate over the input slice, using <b>range</b>. For each item in the slice, we use the two-value assignment of the map to check if the slice item exists as a key. Using the two-value assignment is important, because it allows us to check if the key exists. If it doesn't, we insert the item as a key in the map with a value of <b>true</b>. Again, the value is irrelevant, you could use a string/struct/integer/anything here, we just want a small datatype because a map has to have a value. After inserting the item into the map, we also append it to our unique slice. Finally, once the for-loop finishes, we return the unique slice.\r\n</p>\r\n\r\n<p>\r\nUsing the function is simple enough. Going back to our sample slice above:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\nintegers := []int{1, 2, 3, 3, 4, 5}\r\nunique := unique.Ints(integers)\r\n\r\nfmt.Printf(\"Unique: %v\", unique) // Unique: [1 2 3 4 5]\r\n</pre>\r\n\r\n<p>\r\nAnd that's it! Unfortunately the only drawback to this method is you will need a separate function for each slice type that you need unique functionality for. I've added integers to my <a href=\"https://github.com/KyleBanks/go-kit\">go-kit</a> on GitHub <a href=\"https://github.com/KyleBanks/go-kit/unique\">in the \"unique\" package</a>, and I'm sure I'll be adding support for more datatypes as I need them.\r\n</p>","date":"7/4/2016 00:01 AM","preview":"Slices in Go are quite nice to work worth, but the standard library doesn't provide any way of creating a unique slice. Since this is such a common requirement, the community has come up with a few tricks to accomplish this, and I figured I'd share the one that is the most common, and perhaps simplest to write. ","title":"Creating Unique Slices in Go","url":"http://kylewbanks.com/blog/creating-unique-slices-in-go","author":"Kyle Banks","id":3012,"tags":[]},{"body":"<p>\r\nLike most languages, Go values small, reusable, self contained packages and functions that can be easily reused, tested, and modified. In order to accommodate this, I find the best thing to do is to create your own <a href=\"https://github.com/KyleBanks/go-kit\">go-kit</a>, a collection of small packages that each have a very specific purpose.\r\n</p>\r\n\r\n<p>\r\nHere's a look at my <a href=\"https://github.com/KyleBanks/go-kit\">go-kit on GitHub</a>:\r\n</p>\r\n\r\n<img src=\"https://s3.amazonaws.com/kylewbanks/go-kit.png\" />\r\n\r\n<p>\r\nEach folder represents a separate package, most of which have no dependencies on each-other, or any other packages for that matter. This means that they are easy to test, easy to reuse, and easy to maintain.\r\n</p>\r\n\r\n<p>\r\nUsing <a href=\"https://github.com/kardianos/govendor\">govendor</a>, I can easily add specific packages to a new project as needed:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\ngovendor fetch github.com/KyleBanks/go-kit/cache\r\n</pre>\r\n\r\n<p>\r\nOr grab all of them for bigger projects that need it:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\ngovendor fetch github.com/KyleBanks/go-kit/...\r\n</pre>\r\n\r\n<p>\r\nEven when developing a closed source project, this allows you to open up the bits that are not specifically related to your project, and gain all the benefits of open source projects and reusable modules.\r\n</p>\r\n\r\n<p>\r\nBecause most packages are so small, ensuring their quality is very straightforward. For example, let's look at the <b>contains</b> package. The purpose of this package is to provide the ability to see if a slice contains a particular value. At the time of writing, I only needed this functionality for integer slices, so that's all it supports. As I need this functionality for other data-types, it will be easy to add to the package, write unit tests, and update my project by govendor-ing my go-kit.\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npackage contains\r\n\r\n// Int returns true if the slice of ints contains the value provided.\r\nfunc Int(val int, arr []int) bool {\r\n\tfor _, i := range arr {\r\n\t\tif i == val {\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\treturn false\r\n}\r\n</pre>\r\n\r\n<p>\r\nAnd now for some test cases:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\npackage contains\r\n\r\nimport \"testing\"\r\n\r\nfunc TestInt(t *testing.T) {\r\n\t// Negative cases\r\n\tif Int(0, []int{}) {\r\n\t\tt.Fatal(\"Expected value not to be in empty slice\")\r\n\t} else if Int(0, []int{1, 2, 3}) {\r\n\t\tt.Fatal(\"Expected value not to be in slice\")\r\n\t}\r\n\r\n\t// Positive Cases\r\n\tif !Int(0, []int{1, 2, 3, 0}) {\r\n\t\tt.Fatal(\"Expected value to be in slice\")\r\n\t}\r\n}\r\n</pre>\r\n\r\n<p>\r\nAnd now I can be confident that I can drop this tiny package into any project and know it will work, without having to write anything other than:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\nimport \"github.com/KyleBanks/go-kit/contains\"\r\n\r\n...\r\nints := []int {...}\r\nval := 1\r\n\r\nif contains.Int(val, ints) {\r\n    ...\r\n}\r\n</pre>","date":"7/4/2016 00:01 AM","preview":"Like most languages, Go values small, reusable, self contained packages and functions that can be easily reused, tested, and modified. In order to accommodate this, I find the best thing to do is to create your own go-kit, a collection of small packages that each have a very specific purpose.","title":"Benefits of Creating Your Own go-kit","url":"http://kylewbanks.com/blog/benefits-of-creating-your-own-go-kit","author":"Kyle Banks","id":3013,"tags":[]},{"body":"<p>\r\nI recently added a small package to my <a href=\"http://kylewbanks.com/blog/benefits-of-creating-your-own-go-kit\">go-kit</a> that provides the ability to execute a function after repeated time intervals. The package provides the ability for the time interval to be dynamic, meaning the delay is determined after each execution, or on a fixed interval.\r\n</p>\r\n\r\n<p>\r\nAs always, the most up-to-date source code is available on <a href=\"https://github.com/KyleBanks/go-kit/job\">GitHub</a> but I'd like to go over it briefly here.\r\n</p>\r\n\r\n<p>\r\nHere's what the <b>job</b> package looks like:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n// Package job provides the ability to execute timed jobs in their own goroutine.\r\npackage job\r\n\r\nimport \"time\"\r\n\r\ntype Job interface {\r\n\t// Run is called when the job is triggered.\r\n\tRun()\r\n\r\n\t// SleepTime returns the amount of time to sleep before running\r\n\t// the job again.\r\n\tSleepTime() time.Duration\r\n}\r\n\r\n// RegisterJob schedules a job for execution\r\nfunc RegisterJob(j Job) {\r\n\tgo func(j Job) {\r\n\t\tfor {\r\n\t\t\tj.Run()\r\n\t\t\ttime.Sleep(j.SleepTime())\r\n\t\t}\r\n\t}(j)\r\n}\r\n</pre>\r\n\r\n<p>\r\nPretty straightforward: basically the package exposes a <b>Job</b> interface that can be implemented, and then passed to <b>RegisterJob</b> to be executed on an interval. The contents of this function basically start a new goroutine, which contains an infinite loop. Within the loop, the <b>Run</b> method of the <b>Job</b> is executed, and then the goroutine sleeps for the amount of time returned by the <b>SleepTime</b> function of the <b>Job</b>.\r\n</p>\r\n\r\n<p>\r\nLet's look at a straightforward example:\r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\nimport \"github.com/KyleBanks/go-kit/job\"\r\n\r\ntype MyJob struct {\r\n}\r\n\r\nfunc (MyJob) Run() {\r\n    fmt.Println(\"Running...\")\r\n}\r\n\r\nfunc (MyJob) SleepTime() time.Duration {\r\n    return time.Minute * 2\r\n}\r\n\r\n\r\njob.RegisterJob(&MyJob{})\r\n</pre>\r\n\r\n<p>\r\nThe <b>MyJob</b> example simply prints \"Running...\" every two minutes, but it could do anything. For example, send an email newsletter to users, dump metrics to a third-party API, clean caches, etc.\r\n</p>\r\n\r\n<p>\r\n<b>SleepTime</b> can also return a different amount of time after each execution, allowing you the flexibility to modify job scheduling on-the-fly. For example, you may want to run your job once every hour during peak hours, and once every two minutes during downtime.\r\n</p>\r\n\r\n<p>\r\nThis package is very simple, and it was intentionally designed to be that way, but I would eventually like to extend it to support the ability to run in a cluster, and have only a specified number of instances in the cluster execute. Given the newsletter example above, we may only want to have one instance execute the job to prevent users from being flooded with emails. \r\n</p>\r\n\r\n<p>\r\nContributions are always welcome, as always, via <a href=\"https://github.com/KyleBanks\">GitHub</a>, and let me know if you end up using the <b>job</b> package for anything interesting!\r\n</p>","date":"7/4/2016 00:01 AM","preview":"I recently added a small package to my go-kit that provides the ability to execute a function after repeated time intervals. The package provides the ability for the time interval to be dynamic, meaning the delay is determined after each execution, or on a fixed interval.","title":"Executing Functions on Repeating Time Intervals in Go","url":"http://kylewbanks.com/blog/executing-functions-on-repeating-time-intervals-in-go","author":"Kyle Banks","id":3014,"tags":[]}]