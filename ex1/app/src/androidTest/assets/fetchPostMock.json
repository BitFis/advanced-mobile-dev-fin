[
  {
    "body": "<p>\r\nWhen developing for the web, many people use <a href=\"http://google.com/analytics\">Google Analytics</a> to track, you guessed it, analytical data about users. While the tool is great at what it does, one problem that consistently comes up is the need to keep development analytics from being tracked.\r\n</p>\r\n\r\n<p>\r\nUsually you can use an environment variable on the server-side to only serve the Google Analytics code in production mode. Another option would be to setup a filter in Google Analytics to only track events from a specified domain (your production URL).\r\n</p>\r\n\r\n<p>\r\nThe server-side solution is the most elegant in my opinion because filters aren't applied to the Real-TIme analytics, which can be irritating at times. But what if you are simply serving static HTML files, or want to use a separate, development mode Google Analytics account, even in your staging servers that are set to production mode?\r\n</p>\r\n\r\n\r\n<p>\r\nThe solution is to use JavaScript and detect the hostname to determine if it's being served in production mode. \r\n</p>\r\n\r\n<pre class=\"prettyprint\">\r\n&lt;script type=\"text/javascript\"&gt;\r\n     if (document.location.hostname.indexOf(\"kylewbanks.com\") != -1) {\r\n          /* Production Google Analytics Code */\r\n     } else {\r\n          /* (Optional) Development Google Analytics Code */\r\n     }\r\n&lt;/script&gt;\r\n</pre>\r\n\r\n\r\n<p>\r\nIn most cases, this logic is best suited for the server-side, or using filters in Google Analytics if you can get passed the fact that Real-Time analytics are not filtered. But, for cases where JavaScript is the best solution, enjoy.\r\n</p>",
    "date": "8/29/2013 00:01 AM",
    "preview": "When developing for the web, many people use <a href=\"http://google.com/analytics\">Google Analytics</a> to track, you guessed it, analytical data about users. While the tool is great at what it does, one problem that consistently comes up is the need to keep development analytics from being tracked.",
    "title": "Disabling Google Analytics in Development Using Only JavaScript",
    "url": "http://kylewbanks.com/blog/Disabling-Google-Analytics-in-Development-Using-Only-JavaScript",
    "author": "Kyle Banks",
    "id": 1,
    "tags": [

    ]
  },
  {
    "body": "<h4>Getting Started</h4>\n<p>\nFirst off, lets get Python installed. If you are running a Linux distro you should already have it on your system.\nRun the command: \n<pre class=\"code prettyprint\">\npython -V\n</pre>\nIn a terminal to see if you have it. If not take a look around for how to properly install it on your system. Many\nLinux distros rely on Python, and a specific version at that, so you have to be careful not to ruin your OS's installation.\n</p>\n\n<p>\nIf you do want to use a different version of Python on Linux, you will need to modify the <b>PATH</b> variable to point\nto your installation. It is highly recommended you do NOT modify the 'default' Python installation. Again, take a look \naround for notes on how to install Python on your distro.\n</p>\n\n<p>\nIf you are using Windows or Mac OS, Python can be <a href=\"http://www.python.org/getit/\">downloaded here</a>. \nI recommend getting Python version 3.2.X or higher. Download the appropriate installer for your system, \nand run it while following the prompts.\n</p>\n\n<h4>Hello, Python!</h4>\n<p>\nLet's start our Python careers with the usual <b>\"Hello, World!\"</b> tutorial. Don't worry, we will write something\na little more complex shortly.\n</p>\n\n<p>\nIf you are on Linux, simply type \n<pre class=\"code prettyprint\">\npython\n</pre>\ninto a terminal to open the interactive Python shell. This shell can be used to great affect for testing your code\nor trying out different methods and classes.\n</p>\n\n<p>\nIf you are on Windows, lets open up <a href=\"http://en.wikipedia.org/wiki/IDLE_(Python)\">IDLE</a>, the IDE installed\nby default with Python. (This IDE is also available to Linux, but does not come with the default installation).\nClick <b>Start -> All Programs -> Python X.X -> IDLE (Python Gui)</b> to open up a similar Python shell as Linux\nusers are seeing.\n</p>\n\n<p>\nNow that we have our shell open, let's say hello to the world. \n</p>\n\n<pre class=\"code prettyprint\">\nprint(\"Hello, World!\")\n</pre>\n\n<p>\nWait... what? No semi-colon? No class or method declarations? No imports? Well, that was easy! As you can see, \npython code is written without semi-colons (unless you want to), and uses whitespace as it's main syntactical \nmeans of determining when you have finished typing a command. The only time you have to use the semi-colon is if\nyou want to put two or more commands on the same line. For instance\n</p>\n<pre class=\"code prettyprint\">\n# This won't work...\nprint(\"Hello, World\") print(\"What a fine day to learn Python!\")\n</pre>\n<p>\nwill not work. You would need to put a semi-colon after the first <b>print</b> statement. However if you like to \nmaintain your sanity, you likely aren't writting multiple statements on one line in the first place. In this case,\nyou will never need to use the semi-colon in Python. Hooray!\n</p>\n\n\n\n<h4>Integers & Basic Mathematics</h4>\n\n<p>\nWhat good is programming without numbers? Let's try out a more complicated Python application, and make a calculator.\n</p>\n\n<p>\nFirst thing's first, we need to define what our calculator will need. We want to be able to read-in user input, convert \nit into an integer, perform addition, subtraction, multiplication or division, and output a result. We should be able to handle a\ncase where the user does not input an integer, and if they try to divide by zero. This should be enough requirements\nto get us started, and to build a good introductory Python program.\n</p>\n\n<p>\nIf you are running linux, open a new file in your favorite text editor and save it as <b>python_calculator.py</b> in \na location that you won't lose it.\n</p>\n\n<p>\nOn Windows, open <b>IDLE</b> if you already closed it, and select <b>File -> New Window</b>. This will open up a blank\nwindow we can use for editing code, and we can run our code from here in the Python shell. \nSave this file as <b>python_calculator.py</b>.\n</p>\n\n<p>\nThe first thing we are going to do is quickly document our program using Python's multi-line comments.\n</p>\n\n<pre class=\"code prettyprint\">\n\"\"\"\nSimple calculator application.\n\nReads input from the command line, performs operations, and outputs a value.\n\"\"\"\n</pre>\n\n<p>\nAs you can see, in Python the multi-line comments are done using three double-quotes. We will take a look at the \nsingle line comments a little later.\n</p>\n\n<p>\nNext up, we want to ask the user to provide their first number. We can do this using the <b>input()</b> function\nwhich takes an optional string to prompt the user. We also want to convert this input to an integer so that we \ncan perform operations on it.\n</p>\n\n<pre class=\"code prettyprint\">\nnum1 = int(input(\"Enter a number: \"))\n</pre>\n\n<p>\nNote that this is not safe. If the user were to enter a non-numeric value, the program would throw an exception.\nWe can fix this using a try-catch block.\n</p>\n\n<pre class=\"code prettyprint\">\ntry:\n    num1 = int(input(\"Enter a number: \"))\nexcept NameError:\n    print(\"You have entered an invalid number!\")\n</pre>\n\n<p>\nThere are a few things to pay attention to here. The first thing is that lines inside a try-block (or if-statement, while-loop, \netc.) must be indented. Python uses whitespace as syntax, so you need to make sure to use the same amount of whitespace\nfor each line. If you are using a tab, always use a tab. If you use 3-spaces, always use 3-spaces. Fixing whitespace\nerrors can be troublesome so it's important to train yourself early to maintain consistent spacing.\n</p>\n\n<p>\nThe second thing to note is that the lines that are indented are preceded by a line with a colon. This colon acts\nlike braces do in many other languages. The colon tells Python that the following indented lines should only\nbe executed if the preceding statement evaluates to <b>True</b>.\n</p>\n\n<p>\nNow back to our calculator. If the user enters a non-numeric value, the application will catch the <b>NameError</b>\nexception and output an error message. Let's try it out.\n</p>\n\n<p> \nOn Linux (ensure your <b>PATH</b> variable points to the correct Python installation):\n</p>\n<pre class=\"code\">\npython python_calculator.py\n</pre>\n<p>\nOn Windows, click <b>Run -> Run Module</b> or <b>F5</b>\n</p>\n\n<p>\nIf you enter an invalid number, you should see something like this:\n</p>\n<pre class=\"code\">\nEnter a number: Five\nThat is not a valid number!\n</pre>\n<p>\nOtherwise, the program should exit gracefully without doing anything.\n</p>\n\n<p>\nNote there is still one problem with this piece of code. We don't want the program to exit if the user inputs \nbad data, we want it to prompt for input again. We can use a while-loop to help us out with this. Edit your code \nto look like this:\n</p>\n<pre class=\"code prettyprint\">\nwhile True:\n    try:\n        num1 = int(input(\"Enter a number: \"))\n        break\n    except NameError:\n        print(\"You have entered an invalid number!\")\n</pre>\n<p>\nThis will loop until the user inputs a proper integer. If they do not, it will output our error message, and prompt again.\n</p>\n\n<h4>Functions & Reusable Code</h4>\n<p>\nWe are going to be asking for another number from the user, and we don't want to have to rewrite the same code \nmultiple times, so why don't we create a function to accomplish this. We should be able to pass the function \na string to prompt the user, and then it should return the value the user inputs.\n</p>\n<p>\nFunctions in Python are defined using the <b>def</b> keyword and must be defined previously in the code before they \ncan be called. Let's modify our application to look like this:\n</p>\n\n<pre class=\"code prettyprint\">\n# Prompt the user to enter a number, and return it\ndef askForNumber(prompt):\n    while True:\n        try:\n            num = int(input(prompt))\n            return num\n        except NameError:\n            print(\"That is not a valid number!\")\n\n# Application logic\nnum1 = askForNumber(\"Enter a number: \")\n</pre>\n\n<p>\nAs you can see the code inside <b>askForNumber</b> is almost the same as what we wrote before, but now we don't have to write \nit again. We have created a reusable piece of code, rather than repetition. Here you can also see single line \ncomments, preceded by the hash-symbol.\n</p>\n\n<p>\nNext up we are going to want to ask the user for their second number. Now that we have this function, we can easily \nwrite this at the bottom of our code, and we now have two numbers from the user to work with:\n</p>\n\n<pre class=\"code prettyprint\">\nnum2 = askForNumber(\"Enter a second number: \")\n</pre>\n\n<p>\nNow lets output the results of a few mathematical operations. Beneath the code we currently have, add: \n</p>\n<pre class=\"code prettyprint\">\nprint(\"\")\nprint(str(num1) + \" + \" + str(num2) + \" = \" + str(num1+num2))\nprint(str(num1) + \" - \" + str(num2) + \" = \" + str(num1-num2))\nprint(str(num1) + \" / \" + str(num2) + \" = \" + str(num1/num2))\nprint(str(num1) + \" * \" + str(num2) + \" = \" + str(num1*num2))\n</pre>\n<p>\nThe first line simply prints a blank line for formatting. The remaining lines will compute the values of \nvarious operations, and convert the results into strings (as well as the original values) and print them to the user.\n</p>\n\n<p>\nSample output should look like this:\n</p>\n<pre class=\"code\">\nEnter a number: 23\nEnter a second number: 2\n\n23 + 2 = 25\n23 - 2 = 21\n23 / 2 = 11\n23 * 2 = 46\n</pre>\n\n<p>\nNote that there are a few problems with our current code. One, if you try to divide by zero an exception is thrown. \nTry on your own to catch this exception and print your own error message to the user informing them that they \nalmost caused their computer to implode. \n</p>\n\n<p>\nThe second issue is that if you input a floating point value, or when dividing uneven numbers, the result is\na floating point number cast into an integer. Look at the output above again, and notice that <b>23 / 2</b> is not \n11, its 11.5. The decimal places are missing! Try to rewrite this code to handle floating point values.\n</p>\n\n<p>\nIf all of this was too basic for you, or you have a little Python experience under your belt already, try \ngetting started using Python GUI classes and create a calculator using GUI elements including buttons and \ntextfields.\n</p>\n\n<p>\nFor now, here is the entire application code:\n</p>\n\n<pre class=\"code prettyprint\">\n\"\"\"\nSimple calculator application.\n\nReads input from the command line, performs operations, and outputs a value.\n\"\"\"\n# Prompt the user to enter a number, and return its value\ndef askForNumber(prompt):\n    while True:\n        try:\n            num = int(input(prompt))\n            return num\n        except NameError:\n            print(\"That is not a valid number!\")\n\n# Main logic\nnum1 = askForNumber(\"Enter a number: \")\nnum2 = askForNumber(\"Enter a second number: \")\n\nprint(\"\")\nprint(str(num1) + \" + \" + str(num2) + \" = \" + str(num1+num2))\nprint(str(num1) + \" - \" + str(num2) + \" = \" + str(num1-num2))\nprint(str(num1) + \" / \" + str(num2) + \" = \" + str(num1/num2))\nprint(str(num1) + \" * \" + str(num2) + \" = \" + str(num1*num2))\n</pre>\n",
    "date": "2/18/2013 00:01 AM",
    "preview": "\nFirst off, lets get Python installed. If you are running a Linux distro you should already have it on your system.\nRun the command: \n<pre class=\"code prettyprint\">\npython -V\n</pre>\nIn a terminal to see if you have it. If not take a look around for how to properly install it on your system. Many\nLinux distros rely on Python, and a specific version at that, so you have to be careful not to ruin your OS's installation.\n",
    "title": "Get Started Programming with Python",
    "url": "http://kylewbanks.com/blog/Start-Coding-Python",
    "author": "Kyle Banks",
    "id": 23,
    "tags": [

    ]
  }
]